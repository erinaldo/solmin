'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.3634
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsReportes"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsReportes
    Inherits Global.System.Data.DataSet
    
    Private tabledtRepMenCI As dtRepMenCIDataTable
    
    Private tabledtRepMenSA As dtRepMenSADataTable
    
    Private tabledtTotalRegimen As dtTotalRegimenDataTable
    
    Private tabledtTotalEnvio As dtTotalEnvioDataTable
    
    Private tabledtRepMenAdn As dtRepMenAdnDataTable
    
    Private tabledtRepEntregaEmbAlm As dtRepEntregaEmbAlmDataTable
    
    Private tabledtRegimen As dtRegimenDataTable
    
    Private tabledtIngreso As dtIngresoDataTable
    
    Private tabledtStock As dtStockDataTable
    
    Private tabledtDespacho As dtDespachoDataTable
    
    Private tabledtDespachoStock As dtDespachoStockDataTable
    
    Private tabledtRotacionMensual As dtRotacionMensualDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("dtRepMenCI")) Is Nothing) Then
                MyBase.Tables.Add(New dtRepMenCIDataTable(ds.Tables("dtRepMenCI")))
            End If
            If (Not (ds.Tables("dtRepMenSA")) Is Nothing) Then
                MyBase.Tables.Add(New dtRepMenSADataTable(ds.Tables("dtRepMenSA")))
            End If
            If (Not (ds.Tables("dtTotalRegimen")) Is Nothing) Then
                MyBase.Tables.Add(New dtTotalRegimenDataTable(ds.Tables("dtTotalRegimen")))
            End If
            If (Not (ds.Tables("dtTotalEnvio")) Is Nothing) Then
                MyBase.Tables.Add(New dtTotalEnvioDataTable(ds.Tables("dtTotalEnvio")))
            End If
            If (Not (ds.Tables("dtRepMenAdn")) Is Nothing) Then
                MyBase.Tables.Add(New dtRepMenAdnDataTable(ds.Tables("dtRepMenAdn")))
            End If
            If (Not (ds.Tables("dtRepEntregaEmbAlm")) Is Nothing) Then
                MyBase.Tables.Add(New dtRepEntregaEmbAlmDataTable(ds.Tables("dtRepEntregaEmbAlm")))
            End If
            If (Not (ds.Tables("dtRegimen")) Is Nothing) Then
                MyBase.Tables.Add(New dtRegimenDataTable(ds.Tables("dtRegimen")))
            End If
            If (Not (ds.Tables("dtIngreso")) Is Nothing) Then
                MyBase.Tables.Add(New dtIngresoDataTable(ds.Tables("dtIngreso")))
            End If
            If (Not (ds.Tables("dtStock")) Is Nothing) Then
                MyBase.Tables.Add(New dtStockDataTable(ds.Tables("dtStock")))
            End If
            If (Not (ds.Tables("dtDespacho")) Is Nothing) Then
                MyBase.Tables.Add(New dtDespachoDataTable(ds.Tables("dtDespacho")))
            End If
            If (Not (ds.Tables("dtDespachoStock")) Is Nothing) Then
                MyBase.Tables.Add(New dtDespachoStockDataTable(ds.Tables("dtDespachoStock")))
            End If
            If (Not (ds.Tables("dtRotacionMensual")) Is Nothing) Then
                MyBase.Tables.Add(New dtRotacionMensualDataTable(ds.Tables("dtRotacionMensual")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtRepMenCI() As dtRepMenCIDataTable
        Get
            Return Me.tabledtRepMenCI
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtRepMenSA() As dtRepMenSADataTable
        Get
            Return Me.tabledtRepMenSA
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtTotalRegimen() As dtTotalRegimenDataTable
        Get
            Return Me.tabledtTotalRegimen
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtTotalEnvio() As dtTotalEnvioDataTable
        Get
            Return Me.tabledtTotalEnvio
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtRepMenAdn() As dtRepMenAdnDataTable
        Get
            Return Me.tabledtRepMenAdn
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtRepEntregaEmbAlm() As dtRepEntregaEmbAlmDataTable
        Get
            Return Me.tabledtRepEntregaEmbAlm
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtRegimen() As dtRegimenDataTable
        Get
            Return Me.tabledtRegimen
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtIngreso() As dtIngresoDataTable
        Get
            Return Me.tabledtIngreso
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtStock() As dtStockDataTable
        Get
            Return Me.tabledtStock
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtDespacho() As dtDespachoDataTable
        Get
            Return Me.tabledtDespacho
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtDespachoStock() As dtDespachoStockDataTable
        Get
            Return Me.tabledtDespachoStock
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtRotacionMensual() As dtRotacionMensualDataTable
        Get
            Return Me.tabledtRotacionMensual
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsReportes = CType(MyBase.Clone,dsReportes)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("dtRepMenCI")) Is Nothing) Then
                MyBase.Tables.Add(New dtRepMenCIDataTable(ds.Tables("dtRepMenCI")))
            End If
            If (Not (ds.Tables("dtRepMenSA")) Is Nothing) Then
                MyBase.Tables.Add(New dtRepMenSADataTable(ds.Tables("dtRepMenSA")))
            End If
            If (Not (ds.Tables("dtTotalRegimen")) Is Nothing) Then
                MyBase.Tables.Add(New dtTotalRegimenDataTable(ds.Tables("dtTotalRegimen")))
            End If
            If (Not (ds.Tables("dtTotalEnvio")) Is Nothing) Then
                MyBase.Tables.Add(New dtTotalEnvioDataTable(ds.Tables("dtTotalEnvio")))
            End If
            If (Not (ds.Tables("dtRepMenAdn")) Is Nothing) Then
                MyBase.Tables.Add(New dtRepMenAdnDataTable(ds.Tables("dtRepMenAdn")))
            End If
            If (Not (ds.Tables("dtRepEntregaEmbAlm")) Is Nothing) Then
                MyBase.Tables.Add(New dtRepEntregaEmbAlmDataTable(ds.Tables("dtRepEntregaEmbAlm")))
            End If
            If (Not (ds.Tables("dtRegimen")) Is Nothing) Then
                MyBase.Tables.Add(New dtRegimenDataTable(ds.Tables("dtRegimen")))
            End If
            If (Not (ds.Tables("dtIngreso")) Is Nothing) Then
                MyBase.Tables.Add(New dtIngresoDataTable(ds.Tables("dtIngreso")))
            End If
            If (Not (ds.Tables("dtStock")) Is Nothing) Then
                MyBase.Tables.Add(New dtStockDataTable(ds.Tables("dtStock")))
            End If
            If (Not (ds.Tables("dtDespacho")) Is Nothing) Then
                MyBase.Tables.Add(New dtDespachoDataTable(ds.Tables("dtDespacho")))
            End If
            If (Not (ds.Tables("dtDespachoStock")) Is Nothing) Then
                MyBase.Tables.Add(New dtDespachoStockDataTable(ds.Tables("dtDespachoStock")))
            End If
            If (Not (ds.Tables("dtRotacionMensual")) Is Nothing) Then
                MyBase.Tables.Add(New dtRotacionMensualDataTable(ds.Tables("dtRotacionMensual")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tabledtRepMenCI = CType(MyBase.Tables("dtRepMenCI"),dtRepMenCIDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtRepMenCI) Is Nothing) Then
                Me.tabledtRepMenCI.InitVars
            End If
        End If
        Me.tabledtRepMenSA = CType(MyBase.Tables("dtRepMenSA"),dtRepMenSADataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtRepMenSA) Is Nothing) Then
                Me.tabledtRepMenSA.InitVars
            End If
        End If
        Me.tabledtTotalRegimen = CType(MyBase.Tables("dtTotalRegimen"),dtTotalRegimenDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtTotalRegimen) Is Nothing) Then
                Me.tabledtTotalRegimen.InitVars
            End If
        End If
        Me.tabledtTotalEnvio = CType(MyBase.Tables("dtTotalEnvio"),dtTotalEnvioDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtTotalEnvio) Is Nothing) Then
                Me.tabledtTotalEnvio.InitVars
            End If
        End If
        Me.tabledtRepMenAdn = CType(MyBase.Tables("dtRepMenAdn"),dtRepMenAdnDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtRepMenAdn) Is Nothing) Then
                Me.tabledtRepMenAdn.InitVars
            End If
        End If
        Me.tabledtRepEntregaEmbAlm = CType(MyBase.Tables("dtRepEntregaEmbAlm"),dtRepEntregaEmbAlmDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtRepEntregaEmbAlm) Is Nothing) Then
                Me.tabledtRepEntregaEmbAlm.InitVars
            End If
        End If
        Me.tabledtRegimen = CType(MyBase.Tables("dtRegimen"),dtRegimenDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtRegimen) Is Nothing) Then
                Me.tabledtRegimen.InitVars
            End If
        End If
        Me.tabledtIngreso = CType(MyBase.Tables("dtIngreso"),dtIngresoDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtIngreso) Is Nothing) Then
                Me.tabledtIngreso.InitVars
            End If
        End If
        Me.tabledtStock = CType(MyBase.Tables("dtStock"),dtStockDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtStock) Is Nothing) Then
                Me.tabledtStock.InitVars
            End If
        End If
        Me.tabledtDespacho = CType(MyBase.Tables("dtDespacho"),dtDespachoDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtDespacho) Is Nothing) Then
                Me.tabledtDespacho.InitVars
            End If
        End If
        Me.tabledtDespachoStock = CType(MyBase.Tables("dtDespachoStock"),dtDespachoStockDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtDespachoStock) Is Nothing) Then
                Me.tabledtDespachoStock.InitVars
            End If
        End If
        Me.tabledtRotacionMensual = CType(MyBase.Tables("dtRotacionMensual"),dtRotacionMensualDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtRotacionMensual) Is Nothing) Then
                Me.tabledtRotacionMensual.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsReportes"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsReportes.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tabledtRepMenCI = New dtRepMenCIDataTable
        MyBase.Tables.Add(Me.tabledtRepMenCI)
        Me.tabledtRepMenSA = New dtRepMenSADataTable
        MyBase.Tables.Add(Me.tabledtRepMenSA)
        Me.tabledtTotalRegimen = New dtTotalRegimenDataTable
        MyBase.Tables.Add(Me.tabledtTotalRegimen)
        Me.tabledtTotalEnvio = New dtTotalEnvioDataTable
        MyBase.Tables.Add(Me.tabledtTotalEnvio)
        Me.tabledtRepMenAdn = New dtRepMenAdnDataTable
        MyBase.Tables.Add(Me.tabledtRepMenAdn)
        Me.tabledtRepEntregaEmbAlm = New dtRepEntregaEmbAlmDataTable
        MyBase.Tables.Add(Me.tabledtRepEntregaEmbAlm)
        Me.tabledtRegimen = New dtRegimenDataTable
        MyBase.Tables.Add(Me.tabledtRegimen)
        Me.tabledtIngreso = New dtIngresoDataTable
        MyBase.Tables.Add(Me.tabledtIngreso)
        Me.tabledtStock = New dtStockDataTable
        MyBase.Tables.Add(Me.tabledtStock)
        Me.tabledtDespacho = New dtDespachoDataTable
        MyBase.Tables.Add(Me.tabledtDespacho)
        Me.tabledtDespachoStock = New dtDespachoStockDataTable
        MyBase.Tables.Add(Me.tabledtDespachoStock)
        Me.tabledtRotacionMensual = New dtRotacionMensualDataTable
        MyBase.Tables.Add(Me.tabledtRotacionMensual)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtRepMenCI() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtRepMenSA() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtTotalRegimen() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtTotalEnvio() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtRepMenAdn() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtRepEntregaEmbAlm() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtRegimen() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtIngreso() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtStock() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtDespacho() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtDespachoStock() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtRotacionMensual() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsReportes = New dsReportes
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub dtRepMenCIRowChangeEventHandler(ByVal sender As Object, ByVal e As dtRepMenCIRowChangeEvent)
    
    Public Delegate Sub dtRepMenSARowChangeEventHandler(ByVal sender As Object, ByVal e As dtRepMenSARowChangeEvent)
    
    Public Delegate Sub dtTotalRegimenRowChangeEventHandler(ByVal sender As Object, ByVal e As dtTotalRegimenRowChangeEvent)
    
    Public Delegate Sub dtTotalEnvioRowChangeEventHandler(ByVal sender As Object, ByVal e As dtTotalEnvioRowChangeEvent)
    
    Public Delegate Sub dtRepMenAdnRowChangeEventHandler(ByVal sender As Object, ByVal e As dtRepMenAdnRowChangeEvent)
    
    Public Delegate Sub dtRepEntregaEmbAlmRowChangeEventHandler(ByVal sender As Object, ByVal e As dtRepEntregaEmbAlmRowChangeEvent)
    
    Public Delegate Sub dtRegimenRowChangeEventHandler(ByVal sender As Object, ByVal e As dtRegimenRowChangeEvent)
    
    Public Delegate Sub dtIngresoRowChangeEventHandler(ByVal sender As Object, ByVal e As dtIngresoRowChangeEvent)
    
    Public Delegate Sub dtStockRowChangeEventHandler(ByVal sender As Object, ByVal e As dtStockRowChangeEvent)
    
    Public Delegate Sub dtDespachoRowChangeEventHandler(ByVal sender As Object, ByVal e As dtDespachoRowChangeEvent)
    
    Public Delegate Sub dtDespachoStockRowChangeEventHandler(ByVal sender As Object, ByVal e As dtDespachoStockRowChangeEvent)
    
    Public Delegate Sub dtRotacionMensualRowChangeEventHandler(ByVal sender As Object, ByVal e As dtRotacionMensualRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtRepMenCIDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnTCMPCL As Global.System.Data.DataColumn
        
        Private columnNORCML As Global.System.Data.DataColumn
        
        Private columnNRPARC As Global.System.Data.DataColumn
        
        Private columnTPRVCL As Global.System.Data.DataColumn
        
        Private columnTDITES As Global.System.Data.DataColumn
        
        Private columnFSOLIC As Global.System.Data.DataColumn
        
        Private columnFENTPV As Global.System.Data.DataColumn
        
        Private columnFRJAPV As Global.System.Data.DataColumn
        
        Private columnFIALEM As Global.System.Data.DataColumn
        
        Private columnNBLTAR As Global.System.Data.DataColumn
        
        Private columnQPSOAR As Global.System.Data.DataColumn
        
        Private columnTNMMDT As Global.System.Data.DataColumn
        
        Private columnTTINTC As Global.System.Data.DataColumn
        
        Private columnNUMFAC As Global.System.Data.DataColumn
        
        Private columnTLGEMB As Global.System.Data.DataColumn
        
        Private columnFAPREV As Global.System.Data.DataColumn
        
        Private columnTNMAGC As Global.System.Data.DataColumn
        
        Private columnTCMPVP As Global.System.Data.DataColumn
        
        Private columnFAPRAR As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtRepMenCI"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TCMPCLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTCMPCL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NORCMLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNORCML
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRPARCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNRPARC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TPRVCLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTPRVCL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TDITESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTDITES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FSOLICColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFSOLIC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FENTPVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFENTPV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FRJAPVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFRJAPV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FIALEMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFIALEM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NBLTARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNBLTAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QPSOARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQPSOAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TNMMDTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTNMMDT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TTINTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTTINTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMFACColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMFAC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TLGEMBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTLGEMB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAPREVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAPREV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TNMAGCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTNMAGC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TCMPVPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTCMPVP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAPRARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAPRAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtRepMenCIRow
            Get
                Return CType(Me.Rows(index),dtRepMenCIRow)
            End Get
        End Property
        
        Public Event dtRepMenCIRowChanging As dtRepMenCIRowChangeEventHandler
        
        Public Event dtRepMenCIRowChanged As dtRepMenCIRowChangeEventHandler
        
        Public Event dtRepMenCIRowDeleting As dtRepMenCIRowChangeEventHandler
        
        Public Event dtRepMenCIRowDeleted As dtRepMenCIRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtRepMenCIRow(ByVal row As dtRepMenCIRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtRepMenCIRow( _
                    ByVal TCMPCL As String,  _
                    ByVal NORCML As String,  _
                    ByVal NRPARC As String,  _
                    ByVal TPRVCL As String,  _
                    ByVal TDITES As String,  _
                    ByVal FSOLIC As String,  _
                    ByVal FENTPV As String,  _
                    ByVal FRJAPV As String,  _
                    ByVal FIALEM As String,  _
                    ByVal NBLTAR As String,  _
                    ByVal QPSOAR As String,  _
                    ByVal TNMMDT As String,  _
                    ByVal TTINTC As String,  _
                    ByVal NUMFAC As String,  _
                    ByVal TLGEMB As String,  _
                    ByVal FAPREV As String,  _
                    ByVal TNMAGC As String,  _
                    ByVal TCMPVP As String,  _
                    ByVal FAPRAR As String) As dtRepMenCIRow
            Dim rowdtRepMenCIRow As dtRepMenCIRow = CType(Me.NewRow,dtRepMenCIRow)
            Dim columnValuesArray() As Object = New Object() {TCMPCL, NORCML, NRPARC, TPRVCL, TDITES, FSOLIC, FENTPV, FRJAPV, FIALEM, NBLTAR, QPSOAR, TNMMDT, TTINTC, NUMFAC, TLGEMB, FAPREV, TNMAGC, TCMPVP, FAPRAR}
            rowdtRepMenCIRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtRepMenCIRow)
            Return rowdtRepMenCIRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtRepMenCIDataTable = CType(MyBase.Clone,dtRepMenCIDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtRepMenCIDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTCMPCL = MyBase.Columns("TCMPCL")
            Me.columnNORCML = MyBase.Columns("NORCML")
            Me.columnNRPARC = MyBase.Columns("NRPARC")
            Me.columnTPRVCL = MyBase.Columns("TPRVCL")
            Me.columnTDITES = MyBase.Columns("TDITES")
            Me.columnFSOLIC = MyBase.Columns("FSOLIC")
            Me.columnFENTPV = MyBase.Columns("FENTPV")
            Me.columnFRJAPV = MyBase.Columns("FRJAPV")
            Me.columnFIALEM = MyBase.Columns("FIALEM")
            Me.columnNBLTAR = MyBase.Columns("NBLTAR")
            Me.columnQPSOAR = MyBase.Columns("QPSOAR")
            Me.columnTNMMDT = MyBase.Columns("TNMMDT")
            Me.columnTTINTC = MyBase.Columns("TTINTC")
            Me.columnNUMFAC = MyBase.Columns("NUMFAC")
            Me.columnTLGEMB = MyBase.Columns("TLGEMB")
            Me.columnFAPREV = MyBase.Columns("FAPREV")
            Me.columnTNMAGC = MyBase.Columns("TNMAGC")
            Me.columnTCMPVP = MyBase.Columns("TCMPVP")
            Me.columnFAPRAR = MyBase.Columns("FAPRAR")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTCMPCL = New Global.System.Data.DataColumn("TCMPCL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTCMPCL)
            Me.columnNORCML = New Global.System.Data.DataColumn("NORCML", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNORCML)
            Me.columnNRPARC = New Global.System.Data.DataColumn("NRPARC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRPARC)
            Me.columnTPRVCL = New Global.System.Data.DataColumn("TPRVCL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTPRVCL)
            Me.columnTDITES = New Global.System.Data.DataColumn("TDITES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTDITES)
            Me.columnFSOLIC = New Global.System.Data.DataColumn("FSOLIC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFSOLIC)
            Me.columnFENTPV = New Global.System.Data.DataColumn("FENTPV", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFENTPV)
            Me.columnFRJAPV = New Global.System.Data.DataColumn("FRJAPV", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFRJAPV)
            Me.columnFIALEM = New Global.System.Data.DataColumn("FIALEM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFIALEM)
            Me.columnNBLTAR = New Global.System.Data.DataColumn("NBLTAR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNBLTAR)
            Me.columnQPSOAR = New Global.System.Data.DataColumn("QPSOAR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQPSOAR)
            Me.columnTNMMDT = New Global.System.Data.DataColumn("TNMMDT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTNMMDT)
            Me.columnTTINTC = New Global.System.Data.DataColumn("TTINTC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTTINTC)
            Me.columnNUMFAC = New Global.System.Data.DataColumn("NUMFAC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMFAC)
            Me.columnTLGEMB = New Global.System.Data.DataColumn("TLGEMB", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTLGEMB)
            Me.columnFAPREV = New Global.System.Data.DataColumn("FAPREV", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAPREV)
            Me.columnTNMAGC = New Global.System.Data.DataColumn("TNMAGC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTNMAGC)
            Me.columnTCMPVP = New Global.System.Data.DataColumn("TCMPVP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTCMPVP)
            Me.columnFAPRAR = New Global.System.Data.DataColumn("FAPRAR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAPRAR)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtRepMenCIRow() As dtRepMenCIRow
            Return CType(Me.NewRow,dtRepMenCIRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtRepMenCIRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtRepMenCIRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtRepMenCIRowChangedEvent) Is Nothing) Then
                RaiseEvent dtRepMenCIRowChanged(Me, New dtRepMenCIRowChangeEvent(CType(e.Row,dtRepMenCIRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtRepMenCIRowChangingEvent) Is Nothing) Then
                RaiseEvent dtRepMenCIRowChanging(Me, New dtRepMenCIRowChangeEvent(CType(e.Row,dtRepMenCIRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtRepMenCIRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtRepMenCIRowDeleted(Me, New dtRepMenCIRowChangeEvent(CType(e.Row,dtRepMenCIRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtRepMenCIRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtRepMenCIRowDeleting(Me, New dtRepMenCIRowChangeEvent(CType(e.Row,dtRepMenCIRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtRepMenCIRow(ByVal row As dtRepMenCIRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReportes = New dsReportes
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtRepMenCIDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtRepMenSADataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnTCMPCL As Global.System.Data.DataColumn
        
        Private columnNORCML As Global.System.Data.DataColumn
        
        Private columnPNNMOS As Global.System.Data.DataColumn
        
        Private columnREGIMEN As Global.System.Data.DataColumn
        
        Private columnFDCCMP As Global.System.Data.DataColumn
        
        Private columnDESPACHO As Global.System.Data.DataColumn
        
        Private columnTNMMDT As Global.System.Data.DataColumn
        
        Private columnNBLTAR As Global.System.Data.DataColumn
        
        Private columnQPSOAR As Global.System.Data.DataColumn
        
        Private columnFOB As Global.System.Data.DataColumn
        
        Private columnFLETE As Global.System.Data.DataColumn
        
        Private columnSEGURO As Global.System.Data.DataColumn
        
        Private columnCIF As Global.System.Data.DataColumn
        
        Private columnADVALOREM As Global.System.Data.DataColumn
        
        Private columnIGVPM As Global.System.Data.DataColumn
        
        Private columnDUA As Global.System.Data.DataColumn
        
        Private columnNDIADN As Global.System.Data.DataColumn
        
        Private columnCANAL As Global.System.Data.DataColumn
        
        Private columnDIFATETA As Global.System.Data.DataColumn
        
        Private columnEXW As Global.System.Data.DataColumn
        
        Private columnGFOB As Global.System.Data.DataColumn
        
        Private columnOGASTOS As Global.System.Data.DataColumn
        
        Private columnFAPRAR As Global.System.Data.DataColumn
        
        Private columnFECALM As Global.System.Data.DataColumn
        
        Private columnNCONTEN As Global.System.Data.DataColumn
        
        Private columnTOTDER As Global.System.Data.DataColumn
        
        Private columnDOCUMENTOS As Global.System.Data.DataColumn
        
        Private columnNUMERACION As Global.System.Data.DataColumn
        
        Private columnDERECHOS As Global.System.Data.DataColumn
        
        Private columnDIFDOCUMENTOS As Global.System.Data.DataColumn
        
        Private columnDIFNUMERACION As Global.System.Data.DataColumn
        
        Private columnDIFDERECHOS As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtRepMenSA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TCMPCLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTCMPCL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NORCMLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNORCML
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PNNMOSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPNNMOS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REGIMENColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREGIMEN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FDCCMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFDCCMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESPACHOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESPACHO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TNMMDTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTNMMDT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NBLTARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNBLTAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QPSOARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQPSOAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FLETEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFLETE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SEGUROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEGURO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CIFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCIF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADVALOREMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnADVALOREM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IGVPMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIGVPM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DUAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDUA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NDIADNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNDIADN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CANALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCANAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DIFATETAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIFATETA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EXWColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXW
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GFOBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGFOB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OGASTOSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOGASTOS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAPRARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAPRAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECALMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECALM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NCONTENColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNCONTEN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTDERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTDER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DOCUMENTOSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDOCUMENTOS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMERACIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMERACION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DERECHOSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDERECHOS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DIFDOCUMENTOSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIFDOCUMENTOS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DIFNUMERACIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIFNUMERACION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DIFDERECHOSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIFDERECHOS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtRepMenSARow
            Get
                Return CType(Me.Rows(index),dtRepMenSARow)
            End Get
        End Property
        
        Public Event dtRepMenSARowChanging As dtRepMenSARowChangeEventHandler
        
        Public Event dtRepMenSARowChanged As dtRepMenSARowChangeEventHandler
        
        Public Event dtRepMenSARowDeleting As dtRepMenSARowChangeEventHandler
        
        Public Event dtRepMenSARowDeleted As dtRepMenSARowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtRepMenSARow(ByVal row As dtRepMenSARow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtRepMenSARow( _
                    ByVal TCMPCL As String,  _
                    ByVal NORCML As String,  _
                    ByVal PNNMOS As String,  _
                    ByVal REGIMEN As String,  _
                    ByVal FDCCMP As String,  _
                    ByVal DESPACHO As String,  _
                    ByVal TNMMDT As String,  _
                    ByVal NBLTAR As String,  _
                    ByVal QPSOAR As Double,  _
                    ByVal FOB As Double,  _
                    ByVal FLETE As Double,  _
                    ByVal SEGURO As Double,  _
                    ByVal CIF As Double,  _
                    ByVal ADVALOREM As Double,  _
                    ByVal IGVPM As Double,  _
                    ByVal DUA As String,  _
                    ByVal NDIADN As Integer,  _
                    ByVal CANAL As String,  _
                    ByVal DIFATETA As Integer,  _
                    ByVal EXW As Double,  _
                    ByVal GFOB As Double,  _
                    ByVal OGASTOS As Double,  _
                    ByVal FAPRAR As String,  _
                    ByVal FECALM As String,  _
                    ByVal NCONTEN As Integer,  _
                    ByVal TOTDER As Double,  _
                    ByVal DOCUMENTOS As String,  _
                    ByVal NUMERACION As String,  _
                    ByVal DERECHOS As String,  _
                    ByVal DIFDOCUMENTOS As Integer,  _
                    ByVal DIFNUMERACION As Integer,  _
                    ByVal DIFDERECHOS As Integer) As dtRepMenSARow
            Dim rowdtRepMenSARow As dtRepMenSARow = CType(Me.NewRow,dtRepMenSARow)
            Dim columnValuesArray() As Object = New Object() {TCMPCL, NORCML, PNNMOS, REGIMEN, FDCCMP, DESPACHO, TNMMDT, NBLTAR, QPSOAR, FOB, FLETE, SEGURO, CIF, ADVALOREM, IGVPM, DUA, NDIADN, CANAL, DIFATETA, EXW, GFOB, OGASTOS, FAPRAR, FECALM, NCONTEN, TOTDER, DOCUMENTOS, NUMERACION, DERECHOS, DIFDOCUMENTOS, DIFNUMERACION, DIFDERECHOS}
            rowdtRepMenSARow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtRepMenSARow)
            Return rowdtRepMenSARow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtRepMenSADataTable = CType(MyBase.Clone,dtRepMenSADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtRepMenSADataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTCMPCL = MyBase.Columns("TCMPCL")
            Me.columnNORCML = MyBase.Columns("NORCML")
            Me.columnPNNMOS = MyBase.Columns("PNNMOS")
            Me.columnREGIMEN = MyBase.Columns("REGIMEN")
            Me.columnFDCCMP = MyBase.Columns("FDCCMP")
            Me.columnDESPACHO = MyBase.Columns("DESPACHO")
            Me.columnTNMMDT = MyBase.Columns("TNMMDT")
            Me.columnNBLTAR = MyBase.Columns("NBLTAR")
            Me.columnQPSOAR = MyBase.Columns("QPSOAR")
            Me.columnFOB = MyBase.Columns("FOB")
            Me.columnFLETE = MyBase.Columns("FLETE")
            Me.columnSEGURO = MyBase.Columns("SEGURO")
            Me.columnCIF = MyBase.Columns("CIF")
            Me.columnADVALOREM = MyBase.Columns("ADVALOREM")
            Me.columnIGVPM = MyBase.Columns("IGVPM")
            Me.columnDUA = MyBase.Columns("DUA")
            Me.columnNDIADN = MyBase.Columns("NDIADN")
            Me.columnCANAL = MyBase.Columns("CANAL")
            Me.columnDIFATETA = MyBase.Columns("DIFATETA")
            Me.columnEXW = MyBase.Columns("EXW")
            Me.columnGFOB = MyBase.Columns("GFOB")
            Me.columnOGASTOS = MyBase.Columns("OGASTOS")
            Me.columnFAPRAR = MyBase.Columns("FAPRAR")
            Me.columnFECALM = MyBase.Columns("FECALM")
            Me.columnNCONTEN = MyBase.Columns("NCONTEN")
            Me.columnTOTDER = MyBase.Columns("TOTDER")
            Me.columnDOCUMENTOS = MyBase.Columns("DOCUMENTOS")
            Me.columnNUMERACION = MyBase.Columns("NUMERACION")
            Me.columnDERECHOS = MyBase.Columns("DERECHOS")
            Me.columnDIFDOCUMENTOS = MyBase.Columns("DIFDOCUMENTOS")
            Me.columnDIFNUMERACION = MyBase.Columns("DIFNUMERACION")
            Me.columnDIFDERECHOS = MyBase.Columns("DIFDERECHOS")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTCMPCL = New Global.System.Data.DataColumn("TCMPCL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTCMPCL)
            Me.columnNORCML = New Global.System.Data.DataColumn("NORCML", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNORCML)
            Me.columnPNNMOS = New Global.System.Data.DataColumn("PNNMOS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPNNMOS)
            Me.columnREGIMEN = New Global.System.Data.DataColumn("REGIMEN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREGIMEN)
            Me.columnFDCCMP = New Global.System.Data.DataColumn("FDCCMP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFDCCMP)
            Me.columnDESPACHO = New Global.System.Data.DataColumn("DESPACHO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESPACHO)
            Me.columnTNMMDT = New Global.System.Data.DataColumn("TNMMDT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTNMMDT)
            Me.columnNBLTAR = New Global.System.Data.DataColumn("NBLTAR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNBLTAR)
            Me.columnQPSOAR = New Global.System.Data.DataColumn("QPSOAR", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQPSOAR)
            Me.columnFOB = New Global.System.Data.DataColumn("FOB", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOB)
            Me.columnFLETE = New Global.System.Data.DataColumn("FLETE", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFLETE)
            Me.columnSEGURO = New Global.System.Data.DataColumn("SEGURO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEGURO)
            Me.columnCIF = New Global.System.Data.DataColumn("CIF", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCIF)
            Me.columnADVALOREM = New Global.System.Data.DataColumn("ADVALOREM", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADVALOREM)
            Me.columnIGVPM = New Global.System.Data.DataColumn("IGVPM", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIGVPM)
            Me.columnDUA = New Global.System.Data.DataColumn("DUA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDUA)
            Me.columnNDIADN = New Global.System.Data.DataColumn("NDIADN", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNDIADN)
            Me.columnCANAL = New Global.System.Data.DataColumn("CANAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCANAL)
            Me.columnDIFATETA = New Global.System.Data.DataColumn("DIFATETA", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIFATETA)
            Me.columnEXW = New Global.System.Data.DataColumn("EXW", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXW)
            Me.columnGFOB = New Global.System.Data.DataColumn("GFOB", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGFOB)
            Me.columnOGASTOS = New Global.System.Data.DataColumn("OGASTOS", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOGASTOS)
            Me.columnFAPRAR = New Global.System.Data.DataColumn("FAPRAR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAPRAR)
            Me.columnFECALM = New Global.System.Data.DataColumn("FECALM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECALM)
            Me.columnNCONTEN = New Global.System.Data.DataColumn("NCONTEN", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNCONTEN)
            Me.columnTOTDER = New Global.System.Data.DataColumn("TOTDER", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTDER)
            Me.columnDOCUMENTOS = New Global.System.Data.DataColumn("DOCUMENTOS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOCUMENTOS)
            Me.columnNUMERACION = New Global.System.Data.DataColumn("NUMERACION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMERACION)
            Me.columnDERECHOS = New Global.System.Data.DataColumn("DERECHOS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDERECHOS)
            Me.columnDIFDOCUMENTOS = New Global.System.Data.DataColumn("DIFDOCUMENTOS", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIFDOCUMENTOS)
            Me.columnDIFNUMERACION = New Global.System.Data.DataColumn("DIFNUMERACION", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIFNUMERACION)
            Me.columnDIFDERECHOS = New Global.System.Data.DataColumn("DIFDERECHOS", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIFDERECHOS)
            Me.columnFOB.DefaultValue = CType(0,Double)
            Me.columnFLETE.DefaultValue = CType(0,Double)
            Me.columnSEGURO.DefaultValue = CType(0,Double)
            Me.columnCIF.DefaultValue = CType(0,Double)
            Me.columnADVALOREM.DefaultValue = CType(0,Double)
            Me.columnIGVPM.DefaultValue = CType(0,Double)
            Me.columnEXW.DefaultValue = CType(0,Double)
            Me.columnGFOB.DefaultValue = CType(0,Double)
            Me.columnOGASTOS.DefaultValue = CType(0,Double)
            Me.columnNCONTEN.DefaultValue = CType(0,Integer)
            Me.columnTOTDER.DefaultValue = CType(0,Double)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtRepMenSARow() As dtRepMenSARow
            Return CType(Me.NewRow,dtRepMenSARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtRepMenSARow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtRepMenSARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtRepMenSARowChangedEvent) Is Nothing) Then
                RaiseEvent dtRepMenSARowChanged(Me, New dtRepMenSARowChangeEvent(CType(e.Row,dtRepMenSARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtRepMenSARowChangingEvent) Is Nothing) Then
                RaiseEvent dtRepMenSARowChanging(Me, New dtRepMenSARowChangeEvent(CType(e.Row,dtRepMenSARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtRepMenSARowDeletedEvent) Is Nothing) Then
                RaiseEvent dtRepMenSARowDeleted(Me, New dtRepMenSARowChangeEvent(CType(e.Row,dtRepMenSARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtRepMenSARowDeletingEvent) Is Nothing) Then
                RaiseEvent dtRepMenSARowDeleting(Me, New dtRepMenSARowChangeEvent(CType(e.Row,dtRepMenSARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtRepMenSARow(ByVal row As dtRepMenSARow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReportes = New dsReportes
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtRepMenSADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtTotalRegimenDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnTCMPCL As Global.System.Data.DataColumn
        
        Private columnTIMPDEF As Global.System.Data.DataColumn
        
        Private columnTIMPTEM As Global.System.Data.DataColumn
        
        Private columnTDEPOSI As Global.System.Data.DataColumn
        
        Private columnTADMTEM As Global.System.Data.DataColumn
        
        Private columnTSIMPLIF As Global.System.Data.DataColumn
        
        Private columnTREIMPO As Global.System.Data.DataColumn
        
        Private columnTEXPDEF As Global.System.Data.DataColumn
        
        Private columnTEXPTEM As Global.System.Data.DataColumn
        
        Private columnTREEXPO As Global.System.Data.DataColumn
        
        Private columnTREEMBA As Global.System.Data.DataColumn
        
        Private columnTTRANSB As Global.System.Data.DataColumn
        
        Private columnTTRANSI As Global.System.Data.DataColumn
        
        Private columnTNACDEP As Global.System.Data.DataColumn
        
        Private columnTIMPCON As Global.System.Data.DataColumn
        
        Private columnTADMPER As Global.System.Data.DataColumn
        
        Private columnTADMREE As Global.System.Data.DataColumn
        
        Private columnTEXPREI As Global.System.Data.DataColumn
        
        Private columnTEXPPER As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtTotalRegimen"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TCMPCLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTCMPCL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIMPDEFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIMPDEF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIMPTEMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIMPTEM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TDEPOSIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTDEPOSI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TADMTEMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTADMTEM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TSIMPLIFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTSIMPLIF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TREIMPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTREIMPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TEXPDEFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTEXPDEF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TEXPTEMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTEXPTEM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TREEXPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTREEXPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TREEMBAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTREEMBA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TTRANSBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTTRANSB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TTRANSIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTTRANSI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TNACDEPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTNACDEP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIMPCONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIMPCON
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TADMPERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTADMPER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TADMREEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTADMREE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TEXPREIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTEXPREI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TEXPPERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTEXPPER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtTotalRegimenRow
            Get
                Return CType(Me.Rows(index),dtTotalRegimenRow)
            End Get
        End Property
        
        Public Event dtTotalRegimenRowChanging As dtTotalRegimenRowChangeEventHandler
        
        Public Event dtTotalRegimenRowChanged As dtTotalRegimenRowChangeEventHandler
        
        Public Event dtTotalRegimenRowDeleting As dtTotalRegimenRowChangeEventHandler
        
        Public Event dtTotalRegimenRowDeleted As dtTotalRegimenRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtTotalRegimenRow(ByVal row As dtTotalRegimenRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtTotalRegimenRow( _
                    ByVal TCMPCL As String,  _
                    ByVal TIMPDEF As Integer,  _
                    ByVal TIMPTEM As Integer,  _
                    ByVal TDEPOSI As Integer,  _
                    ByVal TADMTEM As Integer,  _
                    ByVal TSIMPLIF As Integer,  _
                    ByVal TREIMPO As Integer,  _
                    ByVal TEXPDEF As Integer,  _
                    ByVal TEXPTEM As Integer,  _
                    ByVal TREEXPO As Integer,  _
                    ByVal TREEMBA As Integer,  _
                    ByVal TTRANSB As Integer,  _
                    ByVal TTRANSI As Integer,  _
                    ByVal TNACDEP As Integer,  _
                    ByVal TIMPCON As String,  _
                    ByVal TADMPER As String,  _
                    ByVal TADMREE As String,  _
                    ByVal TEXPREI As String,  _
                    ByVal TEXPPER As String) As dtTotalRegimenRow
            Dim rowdtTotalRegimenRow As dtTotalRegimenRow = CType(Me.NewRow,dtTotalRegimenRow)
            Dim columnValuesArray() As Object = New Object() {TCMPCL, TIMPDEF, TIMPTEM, TDEPOSI, TADMTEM, TSIMPLIF, TREIMPO, TEXPDEF, TEXPTEM, TREEXPO, TREEMBA, TTRANSB, TTRANSI, TNACDEP, TIMPCON, TADMPER, TADMREE, TEXPREI, TEXPPER}
            rowdtTotalRegimenRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtTotalRegimenRow)
            Return rowdtTotalRegimenRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtTotalRegimenDataTable = CType(MyBase.Clone,dtTotalRegimenDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtTotalRegimenDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTCMPCL = MyBase.Columns("TCMPCL")
            Me.columnTIMPDEF = MyBase.Columns("TIMPDEF")
            Me.columnTIMPTEM = MyBase.Columns("TIMPTEM")
            Me.columnTDEPOSI = MyBase.Columns("TDEPOSI")
            Me.columnTADMTEM = MyBase.Columns("TADMTEM")
            Me.columnTSIMPLIF = MyBase.Columns("TSIMPLIF")
            Me.columnTREIMPO = MyBase.Columns("TREIMPO")
            Me.columnTEXPDEF = MyBase.Columns("TEXPDEF")
            Me.columnTEXPTEM = MyBase.Columns("TEXPTEM")
            Me.columnTREEXPO = MyBase.Columns("TREEXPO")
            Me.columnTREEMBA = MyBase.Columns("TREEMBA")
            Me.columnTTRANSB = MyBase.Columns("TTRANSB")
            Me.columnTTRANSI = MyBase.Columns("TTRANSI")
            Me.columnTNACDEP = MyBase.Columns("TNACDEP")
            Me.columnTIMPCON = MyBase.Columns("TIMPCON")
            Me.columnTADMPER = MyBase.Columns("TADMPER")
            Me.columnTADMREE = MyBase.Columns("TADMREE")
            Me.columnTEXPREI = MyBase.Columns("TEXPREI")
            Me.columnTEXPPER = MyBase.Columns("TEXPPER")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTCMPCL = New Global.System.Data.DataColumn("TCMPCL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTCMPCL)
            Me.columnTIMPDEF = New Global.System.Data.DataColumn("TIMPDEF", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIMPDEF)
            Me.columnTIMPTEM = New Global.System.Data.DataColumn("TIMPTEM", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIMPTEM)
            Me.columnTDEPOSI = New Global.System.Data.DataColumn("TDEPOSI", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTDEPOSI)
            Me.columnTADMTEM = New Global.System.Data.DataColumn("TADMTEM", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTADMTEM)
            Me.columnTSIMPLIF = New Global.System.Data.DataColumn("TSIMPLIF", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTSIMPLIF)
            Me.columnTREIMPO = New Global.System.Data.DataColumn("TREIMPO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTREIMPO)
            Me.columnTEXPDEF = New Global.System.Data.DataColumn("TEXPDEF", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTEXPDEF)
            Me.columnTEXPTEM = New Global.System.Data.DataColumn("TEXPTEM", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTEXPTEM)
            Me.columnTREEXPO = New Global.System.Data.DataColumn("TREEXPO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTREEXPO)
            Me.columnTREEMBA = New Global.System.Data.DataColumn("TREEMBA", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTREEMBA)
            Me.columnTTRANSB = New Global.System.Data.DataColumn("TTRANSB", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTTRANSB)
            Me.columnTTRANSI = New Global.System.Data.DataColumn("TTRANSI", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTTRANSI)
            Me.columnTNACDEP = New Global.System.Data.DataColumn("TNACDEP", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTNACDEP)
            Me.columnTIMPCON = New Global.System.Data.DataColumn("TIMPCON", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIMPCON)
            Me.columnTADMPER = New Global.System.Data.DataColumn("TADMPER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTADMPER)
            Me.columnTADMREE = New Global.System.Data.DataColumn("TADMREE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTADMREE)
            Me.columnTEXPREI = New Global.System.Data.DataColumn("TEXPREI", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTEXPREI)
            Me.columnTEXPPER = New Global.System.Data.DataColumn("TEXPPER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTEXPPER)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtTotalRegimenRow() As dtTotalRegimenRow
            Return CType(Me.NewRow,dtTotalRegimenRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtTotalRegimenRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtTotalRegimenRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtTotalRegimenRowChangedEvent) Is Nothing) Then
                RaiseEvent dtTotalRegimenRowChanged(Me, New dtTotalRegimenRowChangeEvent(CType(e.Row,dtTotalRegimenRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtTotalRegimenRowChangingEvent) Is Nothing) Then
                RaiseEvent dtTotalRegimenRowChanging(Me, New dtTotalRegimenRowChangeEvent(CType(e.Row,dtTotalRegimenRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtTotalRegimenRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtTotalRegimenRowDeleted(Me, New dtTotalRegimenRowChangeEvent(CType(e.Row,dtTotalRegimenRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtTotalRegimenRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtTotalRegimenRowDeleting(Me, New dtTotalRegimenRowChangeEvent(CType(e.Row,dtTotalRegimenRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtTotalRegimenRow(ByVal row As dtTotalRegimenRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReportes = New dsReportes
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtTotalRegimenDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtTotalEnvioDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnTCMPCL As Global.System.Data.DataColumn
        
        Private columnTCOURIER As Global.System.Data.DataColumn
        
        Private columnTAEREO As Global.System.Data.DataColumn
        
        Private columnTMARITIMO As Global.System.Data.DataColumn
        
        Private columnTTERRESTRE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtTotalEnvio"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TCMPCLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTCMPCL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TCOURIERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTCOURIER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TAEREOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTAEREO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TMARITIMOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTMARITIMO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TTERRESTREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTTERRESTRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtTotalEnvioRow
            Get
                Return CType(Me.Rows(index),dtTotalEnvioRow)
            End Get
        End Property
        
        Public Event dtTotalEnvioRowChanging As dtTotalEnvioRowChangeEventHandler
        
        Public Event dtTotalEnvioRowChanged As dtTotalEnvioRowChangeEventHandler
        
        Public Event dtTotalEnvioRowDeleting As dtTotalEnvioRowChangeEventHandler
        
        Public Event dtTotalEnvioRowDeleted As dtTotalEnvioRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtTotalEnvioRow(ByVal row As dtTotalEnvioRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtTotalEnvioRow(ByVal TCMPCL As String, ByVal TCOURIER As Integer, ByVal TAEREO As Integer, ByVal TMARITIMO As Integer, ByVal TTERRESTRE As Integer) As dtTotalEnvioRow
            Dim rowdtTotalEnvioRow As dtTotalEnvioRow = CType(Me.NewRow,dtTotalEnvioRow)
            Dim columnValuesArray() As Object = New Object() {TCMPCL, TCOURIER, TAEREO, TMARITIMO, TTERRESTRE}
            rowdtTotalEnvioRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtTotalEnvioRow)
            Return rowdtTotalEnvioRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtTotalEnvioDataTable = CType(MyBase.Clone,dtTotalEnvioDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtTotalEnvioDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTCMPCL = MyBase.Columns("TCMPCL")
            Me.columnTCOURIER = MyBase.Columns("TCOURIER")
            Me.columnTAEREO = MyBase.Columns("TAEREO")
            Me.columnTMARITIMO = MyBase.Columns("TMARITIMO")
            Me.columnTTERRESTRE = MyBase.Columns("TTERRESTRE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTCMPCL = New Global.System.Data.DataColumn("TCMPCL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTCMPCL)
            Me.columnTCOURIER = New Global.System.Data.DataColumn("TCOURIER", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTCOURIER)
            Me.columnTAEREO = New Global.System.Data.DataColumn("TAEREO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTAEREO)
            Me.columnTMARITIMO = New Global.System.Data.DataColumn("TMARITIMO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTMARITIMO)
            Me.columnTTERRESTRE = New Global.System.Data.DataColumn("TTERRESTRE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTTERRESTRE)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtTotalEnvioRow() As dtTotalEnvioRow
            Return CType(Me.NewRow,dtTotalEnvioRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtTotalEnvioRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtTotalEnvioRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtTotalEnvioRowChangedEvent) Is Nothing) Then
                RaiseEvent dtTotalEnvioRowChanged(Me, New dtTotalEnvioRowChangeEvent(CType(e.Row,dtTotalEnvioRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtTotalEnvioRowChangingEvent) Is Nothing) Then
                RaiseEvent dtTotalEnvioRowChanging(Me, New dtTotalEnvioRowChangeEvent(CType(e.Row,dtTotalEnvioRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtTotalEnvioRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtTotalEnvioRowDeleted(Me, New dtTotalEnvioRowChangeEvent(CType(e.Row,dtTotalEnvioRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtTotalEnvioRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtTotalEnvioRowDeleting(Me, New dtTotalEnvioRowChangeEvent(CType(e.Row,dtTotalEnvioRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtTotalEnvioRow(ByVal row As dtTotalEnvioRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReportes = New dsReportes
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtTotalEnvioDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtRepMenAdnDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnTCMPCL As Global.System.Data.DataColumn
        
        Private columnNORCML As Global.System.Data.DataColumn
        
        Private columnPNNMOS As Global.System.Data.DataColumn
        
        Private columnFAPOPE As Global.System.Data.DataColumn
        
        Private columnFAPRAR As Global.System.Data.DataColumn
        
        Private columnLEVANTE As Global.System.Data.DataColumn
        
        Private columnALMCLI As Global.System.Data.DataColumn
        
        Private columnPERIODO As Global.System.Data.DataColumn
        
        Private columnDIF_DIA1 As Global.System.Data.DataColumn
        
        Private columnDIF_DIA2 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtRepMenAdn"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TCMPCLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTCMPCL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NORCMLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNORCML
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PNNMOSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPNNMOS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAPOPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAPOPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAPRARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAPRAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LEVANTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLEVANTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ALMCLIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnALMCLI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PERIODOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPERIODO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DIF_DIA1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIF_DIA1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DIF_DIA2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIF_DIA2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtRepMenAdnRow
            Get
                Return CType(Me.Rows(index),dtRepMenAdnRow)
            End Get
        End Property
        
        Public Event dtRepMenAdnRowChanging As dtRepMenAdnRowChangeEventHandler
        
        Public Event dtRepMenAdnRowChanged As dtRepMenAdnRowChangeEventHandler
        
        Public Event dtRepMenAdnRowDeleting As dtRepMenAdnRowChangeEventHandler
        
        Public Event dtRepMenAdnRowDeleted As dtRepMenAdnRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtRepMenAdnRow(ByVal row As dtRepMenAdnRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtRepMenAdnRow(ByVal TCMPCL As String, ByVal NORCML As String, ByVal PNNMOS As String, ByVal FAPOPE As String, ByVal FAPRAR As String, ByVal LEVANTE As String, ByVal ALMCLI As String, ByVal PERIODO As String, ByVal DIF_DIA1 As String, ByVal DIF_DIA2 As String) As dtRepMenAdnRow
            Dim rowdtRepMenAdnRow As dtRepMenAdnRow = CType(Me.NewRow,dtRepMenAdnRow)
            Dim columnValuesArray() As Object = New Object() {TCMPCL, NORCML, PNNMOS, FAPOPE, FAPRAR, LEVANTE, ALMCLI, PERIODO, DIF_DIA1, DIF_DIA2}
            rowdtRepMenAdnRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtRepMenAdnRow)
            Return rowdtRepMenAdnRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtRepMenAdnDataTable = CType(MyBase.Clone,dtRepMenAdnDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtRepMenAdnDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTCMPCL = MyBase.Columns("TCMPCL")
            Me.columnNORCML = MyBase.Columns("NORCML")
            Me.columnPNNMOS = MyBase.Columns("PNNMOS")
            Me.columnFAPOPE = MyBase.Columns("FAPOPE")
            Me.columnFAPRAR = MyBase.Columns("FAPRAR")
            Me.columnLEVANTE = MyBase.Columns("LEVANTE")
            Me.columnALMCLI = MyBase.Columns("ALMCLI")
            Me.columnPERIODO = MyBase.Columns("PERIODO")
            Me.columnDIF_DIA1 = MyBase.Columns("DIF_DIA1")
            Me.columnDIF_DIA2 = MyBase.Columns("DIF_DIA2")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTCMPCL = New Global.System.Data.DataColumn("TCMPCL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTCMPCL)
            Me.columnNORCML = New Global.System.Data.DataColumn("NORCML", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNORCML)
            Me.columnPNNMOS = New Global.System.Data.DataColumn("PNNMOS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPNNMOS)
            Me.columnFAPOPE = New Global.System.Data.DataColumn("FAPOPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAPOPE)
            Me.columnFAPRAR = New Global.System.Data.DataColumn("FAPRAR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAPRAR)
            Me.columnLEVANTE = New Global.System.Data.DataColumn("LEVANTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLEVANTE)
            Me.columnALMCLI = New Global.System.Data.DataColumn("ALMCLI", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnALMCLI)
            Me.columnPERIODO = New Global.System.Data.DataColumn("PERIODO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPERIODO)
            Me.columnDIF_DIA1 = New Global.System.Data.DataColumn("DIF_DIA1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIF_DIA1)
            Me.columnDIF_DIA2 = New Global.System.Data.DataColumn("DIF_DIA2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIF_DIA2)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtRepMenAdnRow() As dtRepMenAdnRow
            Return CType(Me.NewRow,dtRepMenAdnRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtRepMenAdnRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtRepMenAdnRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtRepMenAdnRowChangedEvent) Is Nothing) Then
                RaiseEvent dtRepMenAdnRowChanged(Me, New dtRepMenAdnRowChangeEvent(CType(e.Row,dtRepMenAdnRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtRepMenAdnRowChangingEvent) Is Nothing) Then
                RaiseEvent dtRepMenAdnRowChanging(Me, New dtRepMenAdnRowChangeEvent(CType(e.Row,dtRepMenAdnRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtRepMenAdnRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtRepMenAdnRowDeleted(Me, New dtRepMenAdnRowChangeEvent(CType(e.Row,dtRepMenAdnRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtRepMenAdnRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtRepMenAdnRowDeleting(Me, New dtRepMenAdnRowChangeEvent(CType(e.Row,dtRepMenAdnRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtRepMenAdnRow(ByVal row As dtRepMenAdnRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReportes = New dsReportes
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtRepMenAdnDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtRepEntregaEmbAlmDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCCLNT As Global.System.Data.DataColumn
        
        Private columnTCMPCL As Global.System.Data.DataColumn
        
        Private columnNORSCI As Global.System.Data.DataColumn
        
        Private columnPNNMOS As Global.System.Data.DataColumn
        
        Private columnCAGNCR As Global.System.Data.DataColumn
        
        Private columnTNMAGC As Global.System.Data.DataColumn
        
        Private columnTCANAL As Global.System.Data.DataColumn
        
        Private columnTNRODU As Global.System.Data.DataColumn
        
        Private columnNDOCEM As Global.System.Data.DataColumn
        
        Private columnREFDO1 As Global.System.Data.DataColumn
        
        Private columnFRETES As Global.System.Data.DataColumn
        
        Private columnNORCML As Global.System.Data.DataColumn
        
        Private columnCMRCLR As Global.System.Data.DataColumn
        
        Private columnQRLCSC As Global.System.Data.DataColumn
        
        Private columnNORDSR As Global.System.Data.DataColumn
        
        Private columnFSLCSR As Global.System.Data.DataColumn
        
        Private columnQTRMC As Global.System.Data.DataColumn
        
        Private columnNGUIRN As Global.System.Data.DataColumn
        
        Private columnETA As Global.System.Data.DataColumn
        
        Private columnETD As Global.System.Data.DataColumn
        
        Private columnDIF_FECHAS As Global.System.Data.DataColumn
        
        Private columnTDITES As Global.System.Data.DataColumn
        
        Private columnFRLZSR As Global.System.Data.DataColumn
        
        Private columnTPRVCL As Global.System.Data.DataColumn
        
        Private columnNGUICL As Global.System.Data.DataColumn
        
        Private columnTTINTC As Global.System.Data.DataColumn
        
        Private columnTIPO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtRepEntregaEmbAlm"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CCLNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCCLNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TCMPCLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTCMPCL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NORSCIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNORSCI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PNNMOSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPNNMOS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CAGNCRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCAGNCR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TNMAGCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTNMAGC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TCANALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTCANAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TNRODUColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTNRODU
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NDOCEMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNDOCEM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REFDO1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnREFDO1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FRETESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFRETES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NORCMLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNORCML
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CMRCLRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCMRCLR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QRLCSCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQRLCSC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NORDSRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNORDSR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FSLCSRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFSLCSR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QTRMCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQTRMC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NGUIRNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNGUIRN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ETAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnETA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ETDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnETD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DIF_FECHASColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIF_FECHAS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TDITESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTDITES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FRLZSRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFRLZSR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TPRVCLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTPRVCL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NGUICLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNGUICL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TTINTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTTINTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtRepEntregaEmbAlmRow
            Get
                Return CType(Me.Rows(index),dtRepEntregaEmbAlmRow)
            End Get
        End Property
        
        Public Event dtRepEntregaEmbAlmRowChanging As dtRepEntregaEmbAlmRowChangeEventHandler
        
        Public Event dtRepEntregaEmbAlmRowChanged As dtRepEntregaEmbAlmRowChangeEventHandler
        
        Public Event dtRepEntregaEmbAlmRowDeleting As dtRepEntregaEmbAlmRowChangeEventHandler
        
        Public Event dtRepEntregaEmbAlmRowDeleted As dtRepEntregaEmbAlmRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtRepEntregaEmbAlmRow(ByVal row As dtRepEntregaEmbAlmRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtRepEntregaEmbAlmRow( _
                    ByVal CCLNT As Double,  _
                    ByVal TCMPCL As String,  _
                    ByVal NORSCI As Double,  _
                    ByVal PNNMOS As Double,  _
                    ByVal CAGNCR As Double,  _
                    ByVal TNMAGC As String,  _
                    ByVal TCANAL As String,  _
                    ByVal TNRODU As String,  _
                    ByVal NDOCEM As String,  _
                    ByVal REFDO1 As String,  _
                    ByVal FRETES As String,  _
                    ByVal NORCML As String,  _
                    ByVal CMRCLR As Double,  _
                    ByVal QRLCSC As Double,  _
                    ByVal NORDSR As Double,  _
                    ByVal FSLCSR As String,  _
                    ByVal QTRMC As Double,  _
                    ByVal NGUIRN As Double,  _
                    ByVal ETA As String,  _
                    ByVal ETD As String,  _
                    ByVal DIF_FECHAS As Double,  _
                    ByVal TDITES As String,  _
                    ByVal FRLZSR As String,  _
                    ByVal TPRVCL As String,  _
                    ByVal NGUICL As String,  _
                    ByVal TTINTC As String,  _
                    ByVal TIPO As String) As dtRepEntregaEmbAlmRow
            Dim rowdtRepEntregaEmbAlmRow As dtRepEntregaEmbAlmRow = CType(Me.NewRow,dtRepEntregaEmbAlmRow)
            Dim columnValuesArray() As Object = New Object() {CCLNT, TCMPCL, NORSCI, PNNMOS, CAGNCR, TNMAGC, TCANAL, TNRODU, NDOCEM, REFDO1, FRETES, NORCML, CMRCLR, QRLCSC, NORDSR, FSLCSR, QTRMC, NGUIRN, ETA, ETD, DIF_FECHAS, TDITES, FRLZSR, TPRVCL, NGUICL, TTINTC, TIPO}
            rowdtRepEntregaEmbAlmRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtRepEntregaEmbAlmRow)
            Return rowdtRepEntregaEmbAlmRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtRepEntregaEmbAlmDataTable = CType(MyBase.Clone,dtRepEntregaEmbAlmDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtRepEntregaEmbAlmDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCCLNT = MyBase.Columns("CCLNT")
            Me.columnTCMPCL = MyBase.Columns("TCMPCL")
            Me.columnNORSCI = MyBase.Columns("NORSCI")
            Me.columnPNNMOS = MyBase.Columns("PNNMOS")
            Me.columnCAGNCR = MyBase.Columns("CAGNCR")
            Me.columnTNMAGC = MyBase.Columns("TNMAGC")
            Me.columnTCANAL = MyBase.Columns("TCANAL")
            Me.columnTNRODU = MyBase.Columns("TNRODU")
            Me.columnNDOCEM = MyBase.Columns("NDOCEM")
            Me.columnREFDO1 = MyBase.Columns("REFDO1")
            Me.columnFRETES = MyBase.Columns("FRETES")
            Me.columnNORCML = MyBase.Columns("NORCML")
            Me.columnCMRCLR = MyBase.Columns("CMRCLR")
            Me.columnQRLCSC = MyBase.Columns("QRLCSC")
            Me.columnNORDSR = MyBase.Columns("NORDSR")
            Me.columnFSLCSR = MyBase.Columns("FSLCSR")
            Me.columnQTRMC = MyBase.Columns("QTRMC")
            Me.columnNGUIRN = MyBase.Columns("NGUIRN")
            Me.columnETA = MyBase.Columns("ETA")
            Me.columnETD = MyBase.Columns("ETD")
            Me.columnDIF_FECHAS = MyBase.Columns("DIF_FECHAS")
            Me.columnTDITES = MyBase.Columns("TDITES")
            Me.columnFRLZSR = MyBase.Columns("FRLZSR")
            Me.columnTPRVCL = MyBase.Columns("TPRVCL")
            Me.columnNGUICL = MyBase.Columns("NGUICL")
            Me.columnTTINTC = MyBase.Columns("TTINTC")
            Me.columnTIPO = MyBase.Columns("TIPO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCCLNT = New Global.System.Data.DataColumn("CCLNT", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCCLNT)
            Me.columnTCMPCL = New Global.System.Data.DataColumn("TCMPCL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTCMPCL)
            Me.columnNORSCI = New Global.System.Data.DataColumn("NORSCI", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNORSCI)
            Me.columnPNNMOS = New Global.System.Data.DataColumn("PNNMOS", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPNNMOS)
            Me.columnCAGNCR = New Global.System.Data.DataColumn("CAGNCR", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCAGNCR)
            Me.columnTNMAGC = New Global.System.Data.DataColumn("TNMAGC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTNMAGC)
            Me.columnTCANAL = New Global.System.Data.DataColumn("TCANAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTCANAL)
            Me.columnTNRODU = New Global.System.Data.DataColumn("TNRODU", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTNRODU)
            Me.columnNDOCEM = New Global.System.Data.DataColumn("NDOCEM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNDOCEM)
            Me.columnREFDO1 = New Global.System.Data.DataColumn("REFDO1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREFDO1)
            Me.columnFRETES = New Global.System.Data.DataColumn("FRETES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFRETES)
            Me.columnNORCML = New Global.System.Data.DataColumn("NORCML", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNORCML)
            Me.columnCMRCLR = New Global.System.Data.DataColumn("CMRCLR", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCMRCLR)
            Me.columnQRLCSC = New Global.System.Data.DataColumn("QRLCSC", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQRLCSC)
            Me.columnNORDSR = New Global.System.Data.DataColumn("NORDSR", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNORDSR)
            Me.columnFSLCSR = New Global.System.Data.DataColumn("FSLCSR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFSLCSR)
            Me.columnQTRMC = New Global.System.Data.DataColumn("QTRMC", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQTRMC)
            Me.columnNGUIRN = New Global.System.Data.DataColumn("NGUIRN", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNGUIRN)
            Me.columnETA = New Global.System.Data.DataColumn("ETA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnETA)
            Me.columnETD = New Global.System.Data.DataColumn("ETD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnETD)
            Me.columnDIF_FECHAS = New Global.System.Data.DataColumn("DIF_FECHAS", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIF_FECHAS)
            Me.columnTDITES = New Global.System.Data.DataColumn("TDITES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTDITES)
            Me.columnFRLZSR = New Global.System.Data.DataColumn("FRLZSR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFRLZSR)
            Me.columnTPRVCL = New Global.System.Data.DataColumn("TPRVCL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTPRVCL)
            Me.columnNGUICL = New Global.System.Data.DataColumn("NGUICL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNGUICL)
            Me.columnTTINTC = New Global.System.Data.DataColumn("TTINTC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTTINTC)
            Me.columnTIPO = New Global.System.Data.DataColumn("TIPO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO)
            Me.columnTCMPCL.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtRepEntregaEmbAlmRow() As dtRepEntregaEmbAlmRow
            Return CType(Me.NewRow,dtRepEntregaEmbAlmRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtRepEntregaEmbAlmRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtRepEntregaEmbAlmRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtRepEntregaEmbAlmRowChangedEvent) Is Nothing) Then
                RaiseEvent dtRepEntregaEmbAlmRowChanged(Me, New dtRepEntregaEmbAlmRowChangeEvent(CType(e.Row,dtRepEntregaEmbAlmRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtRepEntregaEmbAlmRowChangingEvent) Is Nothing) Then
                RaiseEvent dtRepEntregaEmbAlmRowChanging(Me, New dtRepEntregaEmbAlmRowChangeEvent(CType(e.Row,dtRepEntregaEmbAlmRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtRepEntregaEmbAlmRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtRepEntregaEmbAlmRowDeleted(Me, New dtRepEntregaEmbAlmRowChangeEvent(CType(e.Row,dtRepEntregaEmbAlmRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtRepEntregaEmbAlmRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtRepEntregaEmbAlmRowDeleting(Me, New dtRepEntregaEmbAlmRowChangeEvent(CType(e.Row,dtRepEntregaEmbAlmRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtRepEntregaEmbAlmRow(ByVal row As dtRepEntregaEmbAlmRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReportes = New dsReportes
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtRepEntregaEmbAlmDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtRegimenDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnRegimen As Global.System.Data.DataColumn
        
        Private columnCantidad As Global.System.Data.DataColumn
        
        Private columnCodigo As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtRegimen"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RegimenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRegimen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtRegimenRow
            Get
                Return CType(Me.Rows(index),dtRegimenRow)
            End Get
        End Property
        
        Public Event dtRegimenRowChanging As dtRegimenRowChangeEventHandler
        
        Public Event dtRegimenRowChanged As dtRegimenRowChangeEventHandler
        
        Public Event dtRegimenRowDeleting As dtRegimenRowChangeEventHandler
        
        Public Event dtRegimenRowDeleted As dtRegimenRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtRegimenRow(ByVal row As dtRegimenRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtRegimenRow(ByVal Regimen As String, ByVal Cantidad As Integer, ByVal Codigo As String) As dtRegimenRow
            Dim rowdtRegimenRow As dtRegimenRow = CType(Me.NewRow,dtRegimenRow)
            Dim columnValuesArray() As Object = New Object() {Regimen, Cantidad, Codigo}
            rowdtRegimenRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtRegimenRow)
            Return rowdtRegimenRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtRegimenDataTable = CType(MyBase.Clone,dtRegimenDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtRegimenDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnRegimen = MyBase.Columns("Regimen")
            Me.columnCantidad = MyBase.Columns("Cantidad")
            Me.columnCodigo = MyBase.Columns("Codigo")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnRegimen = New Global.System.Data.DataColumn("Regimen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRegimen)
            Me.columnCantidad = New Global.System.Data.DataColumn("Cantidad", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidad)
            Me.columnCodigo = New Global.System.Data.DataColumn("Codigo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigo)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtRegimenRow() As dtRegimenRow
            Return CType(Me.NewRow,dtRegimenRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtRegimenRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtRegimenRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtRegimenRowChangedEvent) Is Nothing) Then
                RaiseEvent dtRegimenRowChanged(Me, New dtRegimenRowChangeEvent(CType(e.Row,dtRegimenRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtRegimenRowChangingEvent) Is Nothing) Then
                RaiseEvent dtRegimenRowChanging(Me, New dtRegimenRowChangeEvent(CType(e.Row,dtRegimenRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtRegimenRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtRegimenRowDeleted(Me, New dtRegimenRowChangeEvent(CType(e.Row,dtRegimenRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtRegimenRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtRegimenRowDeleting(Me, New dtRegimenRowChangeEvent(CType(e.Row,dtRegimenRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtRegimenRow(ByVal row As dtRegimenRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReportes = New dsReportes
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtRegimenDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtIngresoDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCMRCLR As Global.System.Data.DataColumn
        
        Private columnDESMER As Global.System.Data.DataColumn
        
        Private columnCANTIDAD As Global.System.Data.DataColumn
        
        Private columnUNIDAD As Global.System.Data.DataColumn
        
        Private columnPORCENTAJE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtIngreso"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CMRCLRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCMRCLR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESMERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESMER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CANTIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCANTIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UNIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PORCENTAJEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPORCENTAJE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtIngresoRow
            Get
                Return CType(Me.Rows(index),dtIngresoRow)
            End Get
        End Property
        
        Public Event dtIngresoRowChanging As dtIngresoRowChangeEventHandler
        
        Public Event dtIngresoRowChanged As dtIngresoRowChangeEventHandler
        
        Public Event dtIngresoRowDeleting As dtIngresoRowChangeEventHandler
        
        Public Event dtIngresoRowDeleted As dtIngresoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtIngresoRow(ByVal row As dtIngresoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtIngresoRow(ByVal CMRCLR As String, ByVal DESMER As String, ByVal CANTIDAD As String, ByVal UNIDAD As String, ByVal PORCENTAJE As String) As dtIngresoRow
            Dim rowdtIngresoRow As dtIngresoRow = CType(Me.NewRow,dtIngresoRow)
            Dim columnValuesArray() As Object = New Object() {CMRCLR, DESMER, CANTIDAD, UNIDAD, PORCENTAJE}
            rowdtIngresoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtIngresoRow)
            Return rowdtIngresoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtIngresoDataTable = CType(MyBase.Clone,dtIngresoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtIngresoDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCMRCLR = MyBase.Columns("CMRCLR")
            Me.columnDESMER = MyBase.Columns("DESMER")
            Me.columnCANTIDAD = MyBase.Columns("CANTIDAD")
            Me.columnUNIDAD = MyBase.Columns("UNIDAD")
            Me.columnPORCENTAJE = MyBase.Columns("PORCENTAJE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCMRCLR = New Global.System.Data.DataColumn("CMRCLR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCMRCLR)
            Me.columnDESMER = New Global.System.Data.DataColumn("DESMER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESMER)
            Me.columnCANTIDAD = New Global.System.Data.DataColumn("CANTIDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCANTIDAD)
            Me.columnUNIDAD = New Global.System.Data.DataColumn("UNIDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNIDAD)
            Me.columnPORCENTAJE = New Global.System.Data.DataColumn("PORCENTAJE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPORCENTAJE)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtIngresoRow() As dtIngresoRow
            Return CType(Me.NewRow,dtIngresoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtIngresoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtIngresoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtIngresoRowChangedEvent) Is Nothing) Then
                RaiseEvent dtIngresoRowChanged(Me, New dtIngresoRowChangeEvent(CType(e.Row,dtIngresoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtIngresoRowChangingEvent) Is Nothing) Then
                RaiseEvent dtIngresoRowChanging(Me, New dtIngresoRowChangeEvent(CType(e.Row,dtIngresoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtIngresoRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtIngresoRowDeleted(Me, New dtIngresoRowChangeEvent(CType(e.Row,dtIngresoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtIngresoRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtIngresoRowDeleting(Me, New dtIngresoRowChangeEvent(CType(e.Row,dtIngresoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtIngresoRow(ByVal row As dtIngresoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReportes = New dsReportes
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtIngresoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtStockDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCMRCLR As Global.System.Data.DataColumn
        
        Private columnNORDSR As Global.System.Data.DataColumn
        
        Private columnCMRCD As Global.System.Data.DataColumn
        
        Private columnTMRCD2 As Global.System.Data.DataColumn
        
        Private columnQSLMC As Global.System.Data.DataColumn
        
        Private columnCUNCN5 As Global.System.Data.DataColumn
        
        Private columnQMRSRC As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtStock"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CMRCLRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCMRCLR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NORDSRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNORDSR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CMRCDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCMRCD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TMRCD2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTMRCD2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QSLMCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQSLMC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CUNCN5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUNCN5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QMRSRCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQMRSRC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtStockRow
            Get
                Return CType(Me.Rows(index),dtStockRow)
            End Get
        End Property
        
        Public Event dtStockRowChanging As dtStockRowChangeEventHandler
        
        Public Event dtStockRowChanged As dtStockRowChangeEventHandler
        
        Public Event dtStockRowDeleting As dtStockRowChangeEventHandler
        
        Public Event dtStockRowDeleted As dtStockRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtStockRow(ByVal row As dtStockRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtStockRow(ByVal CMRCLR As String, ByVal NORDSR As String, ByVal CMRCD As String, ByVal TMRCD2 As String, ByVal QSLMC As String, ByVal CUNCN5 As String, ByVal QMRSRC As String) As dtStockRow
            Dim rowdtStockRow As dtStockRow = CType(Me.NewRow,dtStockRow)
            Dim columnValuesArray() As Object = New Object() {CMRCLR, NORDSR, CMRCD, TMRCD2, QSLMC, CUNCN5, QMRSRC}
            rowdtStockRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtStockRow)
            Return rowdtStockRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtStockDataTable = CType(MyBase.Clone,dtStockDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtStockDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCMRCLR = MyBase.Columns("CMRCLR")
            Me.columnNORDSR = MyBase.Columns("NORDSR")
            Me.columnCMRCD = MyBase.Columns("CMRCD")
            Me.columnTMRCD2 = MyBase.Columns("TMRCD2")
            Me.columnQSLMC = MyBase.Columns("QSLMC")
            Me.columnCUNCN5 = MyBase.Columns("CUNCN5")
            Me.columnQMRSRC = MyBase.Columns("QMRSRC")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCMRCLR = New Global.System.Data.DataColumn("CMRCLR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCMRCLR)
            Me.columnNORDSR = New Global.System.Data.DataColumn("NORDSR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNORDSR)
            Me.columnCMRCD = New Global.System.Data.DataColumn("CMRCD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCMRCD)
            Me.columnTMRCD2 = New Global.System.Data.DataColumn("TMRCD2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTMRCD2)
            Me.columnQSLMC = New Global.System.Data.DataColumn("QSLMC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQSLMC)
            Me.columnCUNCN5 = New Global.System.Data.DataColumn("CUNCN5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUNCN5)
            Me.columnQMRSRC = New Global.System.Data.DataColumn("QMRSRC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQMRSRC)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtStockRow() As dtStockRow
            Return CType(Me.NewRow,dtStockRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtStockRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtStockRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtStockRowChangedEvent) Is Nothing) Then
                RaiseEvent dtStockRowChanged(Me, New dtStockRowChangeEvent(CType(e.Row,dtStockRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtStockRowChangingEvent) Is Nothing) Then
                RaiseEvent dtStockRowChanging(Me, New dtStockRowChangeEvent(CType(e.Row,dtStockRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtStockRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtStockRowDeleted(Me, New dtStockRowChangeEvent(CType(e.Row,dtStockRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtStockRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtStockRowDeleting(Me, New dtStockRowChangeEvent(CType(e.Row,dtStockRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtStockRow(ByVal row As dtStockRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReportes = New dsReportes
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtStockDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtDespachoDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCMRCLR As Global.System.Data.DataColumn
        
        Private columnDESMER As Global.System.Data.DataColumn
        
        Private columnCANTIDAD As Global.System.Data.DataColumn
        
        Private columnUNIDAD As Global.System.Data.DataColumn
        
        Private columnPORCENTAJE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtDespacho"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CMRCLRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCMRCLR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESMERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESMER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CANTIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCANTIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UNIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PORCENTAJEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPORCENTAJE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtDespachoRow
            Get
                Return CType(Me.Rows(index),dtDespachoRow)
            End Get
        End Property
        
        Public Event dtDespachoRowChanging As dtDespachoRowChangeEventHandler
        
        Public Event dtDespachoRowChanged As dtDespachoRowChangeEventHandler
        
        Public Event dtDespachoRowDeleting As dtDespachoRowChangeEventHandler
        
        Public Event dtDespachoRowDeleted As dtDespachoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtDespachoRow(ByVal row As dtDespachoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtDespachoRow(ByVal CMRCLR As String, ByVal DESMER As String, ByVal CANTIDAD As String, ByVal UNIDAD As String, ByVal PORCENTAJE As String) As dtDespachoRow
            Dim rowdtDespachoRow As dtDespachoRow = CType(Me.NewRow,dtDespachoRow)
            Dim columnValuesArray() As Object = New Object() {CMRCLR, DESMER, CANTIDAD, UNIDAD, PORCENTAJE}
            rowdtDespachoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtDespachoRow)
            Return rowdtDespachoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtDespachoDataTable = CType(MyBase.Clone,dtDespachoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtDespachoDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCMRCLR = MyBase.Columns("CMRCLR")
            Me.columnDESMER = MyBase.Columns("DESMER")
            Me.columnCANTIDAD = MyBase.Columns("CANTIDAD")
            Me.columnUNIDAD = MyBase.Columns("UNIDAD")
            Me.columnPORCENTAJE = MyBase.Columns("PORCENTAJE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCMRCLR = New Global.System.Data.DataColumn("CMRCLR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCMRCLR)
            Me.columnDESMER = New Global.System.Data.DataColumn("DESMER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESMER)
            Me.columnCANTIDAD = New Global.System.Data.DataColumn("CANTIDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCANTIDAD)
            Me.columnUNIDAD = New Global.System.Data.DataColumn("UNIDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNIDAD)
            Me.columnPORCENTAJE = New Global.System.Data.DataColumn("PORCENTAJE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPORCENTAJE)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtDespachoRow() As dtDespachoRow
            Return CType(Me.NewRow,dtDespachoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtDespachoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtDespachoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtDespachoRowChangedEvent) Is Nothing) Then
                RaiseEvent dtDespachoRowChanged(Me, New dtDespachoRowChangeEvent(CType(e.Row,dtDespachoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtDespachoRowChangingEvent) Is Nothing) Then
                RaiseEvent dtDespachoRowChanging(Me, New dtDespachoRowChangeEvent(CType(e.Row,dtDespachoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtDespachoRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtDespachoRowDeleted(Me, New dtDespachoRowChangeEvent(CType(e.Row,dtDespachoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtDespachoRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtDespachoRowDeleting(Me, New dtDespachoRowChangeEvent(CType(e.Row,dtDespachoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtDespachoRow(ByVal row As dtDespachoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReportes = New dsReportes
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtDespachoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtDespachoStockDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCMRCLR As Global.System.Data.DataColumn
        
        Private columnDESMER As Global.System.Data.DataColumn
        
        Private columnQING As Global.System.Data.DataColumn
        
        Private columnQSAL As Global.System.Data.DataColumn
        
        Private columnUNIDAD As Global.System.Data.DataColumn
        
        Private columnPROCENTAJEI As Global.System.Data.DataColumn
        
        Private columnPROCENTAJED As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtDespachoStock"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CMRCLRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCMRCLR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESMERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESMER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QINGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQING
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QSALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQSAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UNIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROCENTAJEIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROCENTAJEI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROCENTAJEDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROCENTAJED
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtDespachoStockRow
            Get
                Return CType(Me.Rows(index),dtDespachoStockRow)
            End Get
        End Property
        
        Public Event dtDespachoStockRowChanging As dtDespachoStockRowChangeEventHandler
        
        Public Event dtDespachoStockRowChanged As dtDespachoStockRowChangeEventHandler
        
        Public Event dtDespachoStockRowDeleting As dtDespachoStockRowChangeEventHandler
        
        Public Event dtDespachoStockRowDeleted As dtDespachoStockRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtDespachoStockRow(ByVal row As dtDespachoStockRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtDespachoStockRow(ByVal CMRCLR As String, ByVal DESMER As String, ByVal QING As String, ByVal QSAL As String, ByVal UNIDAD As String, ByVal PROCENTAJEI As String, ByVal PROCENTAJED As String) As dtDespachoStockRow
            Dim rowdtDespachoStockRow As dtDespachoStockRow = CType(Me.NewRow,dtDespachoStockRow)
            Dim columnValuesArray() As Object = New Object() {CMRCLR, DESMER, QING, QSAL, UNIDAD, PROCENTAJEI, PROCENTAJED}
            rowdtDespachoStockRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtDespachoStockRow)
            Return rowdtDespachoStockRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtDespachoStockDataTable = CType(MyBase.Clone,dtDespachoStockDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtDespachoStockDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCMRCLR = MyBase.Columns("CMRCLR")
            Me.columnDESMER = MyBase.Columns("DESMER")
            Me.columnQING = MyBase.Columns("QING")
            Me.columnQSAL = MyBase.Columns("QSAL")
            Me.columnUNIDAD = MyBase.Columns("UNIDAD")
            Me.columnPROCENTAJEI = MyBase.Columns("PROCENTAJEI")
            Me.columnPROCENTAJED = MyBase.Columns("PROCENTAJED")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCMRCLR = New Global.System.Data.DataColumn("CMRCLR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCMRCLR)
            Me.columnDESMER = New Global.System.Data.DataColumn("DESMER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESMER)
            Me.columnQING = New Global.System.Data.DataColumn("QING", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQING)
            Me.columnQSAL = New Global.System.Data.DataColumn("QSAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQSAL)
            Me.columnUNIDAD = New Global.System.Data.DataColumn("UNIDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNIDAD)
            Me.columnPROCENTAJEI = New Global.System.Data.DataColumn("PROCENTAJEI", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROCENTAJEI)
            Me.columnPROCENTAJED = New Global.System.Data.DataColumn("PROCENTAJED", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROCENTAJED)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtDespachoStockRow() As dtDespachoStockRow
            Return CType(Me.NewRow,dtDespachoStockRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtDespachoStockRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtDespachoStockRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtDespachoStockRowChangedEvent) Is Nothing) Then
                RaiseEvent dtDespachoStockRowChanged(Me, New dtDespachoStockRowChangeEvent(CType(e.Row,dtDespachoStockRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtDespachoStockRowChangingEvent) Is Nothing) Then
                RaiseEvent dtDespachoStockRowChanging(Me, New dtDespachoStockRowChangeEvent(CType(e.Row,dtDespachoStockRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtDespachoStockRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtDespachoStockRowDeleted(Me, New dtDespachoStockRowChangeEvent(CType(e.Row,dtDespachoStockRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtDespachoStockRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtDespachoStockRowDeleting(Me, New dtDespachoStockRowChangeEvent(CType(e.Row,dtDespachoStockRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtDespachoStockRow(ByVal row As dtDespachoStockRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReportes = New dsReportes
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtDespachoStockDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtRotacionMensualDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCMRCLR As Global.System.Data.DataColumn
        
        Private columnTMRCD2 As Global.System.Data.DataColumn
        
        Private columnNORDSR As Global.System.Data.DataColumn
        
        Private columnINGRESOS_01 As Global.System.Data.DataColumn
        
        Private columnDESPACHO_01 As Global.System.Data.DataColumn
        
        Private columnSTOCK_01 As Global.System.Data.DataColumn
        
        Private columnINGRESOS_02 As Global.System.Data.DataColumn
        
        Private columnDESPACHO_02 As Global.System.Data.DataColumn
        
        Private columnSTOCK_02 As Global.System.Data.DataColumn
        
        Private columnINGRESOS_03 As Global.System.Data.DataColumn
        
        Private columnDESPACHO_03 As Global.System.Data.DataColumn
        
        Private columnSTOCK_03 As Global.System.Data.DataColumn
        
        Private columnINGRESOS_04 As Global.System.Data.DataColumn
        
        Private columnDESPACHO_04 As Global.System.Data.DataColumn
        
        Private columnSTOCK_04 As Global.System.Data.DataColumn
        
        Private columnINGRESOS_05 As Global.System.Data.DataColumn
        
        Private columnDESPACHO_05 As Global.System.Data.DataColumn
        
        Private columnSTOCK_05 As Global.System.Data.DataColumn
        
        Private columnINGRESOS_06 As Global.System.Data.DataColumn
        
        Private columnDESPACHO_06 As Global.System.Data.DataColumn
        
        Private columnSTOCK_06 As Global.System.Data.DataColumn
        
        Private columnINGRESOS_07 As Global.System.Data.DataColumn
        
        Private columnDESPACHO_07 As Global.System.Data.DataColumn
        
        Private columnSTOCK_07 As Global.System.Data.DataColumn
        
        Private columnINGRESOS_08 As Global.System.Data.DataColumn
        
        Private columnDESPACHO_08 As Global.System.Data.DataColumn
        
        Private columnSTOCK_08 As Global.System.Data.DataColumn
        
        Private columnINGRESOS_09 As Global.System.Data.DataColumn
        
        Private columnDESPACHO_09 As Global.System.Data.DataColumn
        
        Private columnSTOCK_09 As Global.System.Data.DataColumn
        
        Private columnINGRESOS_10 As Global.System.Data.DataColumn
        
        Private columnDESPACHO_10 As Global.System.Data.DataColumn
        
        Private columnSTOCK_10 As Global.System.Data.DataColumn
        
        Private columnINGRESOS_11 As Global.System.Data.DataColumn
        
        Private columnDESPACHO_11 As Global.System.Data.DataColumn
        
        Private columnSTOCK_11 As Global.System.Data.DataColumn
        
        Private columnINGRESOS_12 As Global.System.Data.DataColumn
        
        Private columnDESPACHO_12 As Global.System.Data.DataColumn
        
        Private columnSTOCK_12 As Global.System.Data.DataColumn
        
        Private columnSUMA_DES As Global.System.Data.DataColumn
        
        Private columnSUMA_ING As Global.System.Data.DataColumn
        
        Private columnPORCENTAJE As Global.System.Data.DataColumn
        
        Private columnSTOCK_INI As Global.System.Data.DataColumn
        
        Private columnSTOCK_FIN As Global.System.Data.DataColumn
        
        Private columnSTOCK_PROM As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtRotacionMensual"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CMRCLRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCMRCLR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TMRCD2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTMRCD2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NORDSRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNORDSR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INGRESOS_01Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnINGRESOS_01
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESPACHO_01Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESPACHO_01
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STOCK_01Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTOCK_01
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INGRESOS_02Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnINGRESOS_02
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESPACHO_02Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESPACHO_02
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STOCK_02Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTOCK_02
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INGRESOS_03Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnINGRESOS_03
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESPACHO_03Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESPACHO_03
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STOCK_03Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTOCK_03
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INGRESOS_04Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnINGRESOS_04
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESPACHO_04Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESPACHO_04
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STOCK_04Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTOCK_04
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INGRESOS_05Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnINGRESOS_05
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESPACHO_05Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESPACHO_05
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STOCK_05Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTOCK_05
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INGRESOS_06Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnINGRESOS_06
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESPACHO_06Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESPACHO_06
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STOCK_06Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTOCK_06
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INGRESOS_07Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnINGRESOS_07
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESPACHO_07Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESPACHO_07
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STOCK_07Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTOCK_07
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INGRESOS_08Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnINGRESOS_08
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESPACHO_08Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESPACHO_08
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STOCK_08Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTOCK_08
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INGRESOS_09Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnINGRESOS_09
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESPACHO_09Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESPACHO_09
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STOCK_09Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTOCK_09
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INGRESOS_10Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnINGRESOS_10
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESPACHO_10Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESPACHO_10
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STOCK_10Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTOCK_10
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INGRESOS_11Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnINGRESOS_11
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESPACHO_11Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESPACHO_11
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STOCK_11Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTOCK_11
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INGRESOS_12Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnINGRESOS_12
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESPACHO_12Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESPACHO_12
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STOCK_12Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTOCK_12
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUMA_DESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUMA_DES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUMA_INGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUMA_ING
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PORCENTAJEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPORCENTAJE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STOCK_INIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTOCK_INI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STOCK_FINColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTOCK_FIN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STOCK_PROMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTOCK_PROM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtRotacionMensualRow
            Get
                Return CType(Me.Rows(index),dtRotacionMensualRow)
            End Get
        End Property
        
        Public Event dtRotacionMensualRowChanging As dtRotacionMensualRowChangeEventHandler
        
        Public Event dtRotacionMensualRowChanged As dtRotacionMensualRowChangeEventHandler
        
        Public Event dtRotacionMensualRowDeleting As dtRotacionMensualRowChangeEventHandler
        
        Public Event dtRotacionMensualRowDeleted As dtRotacionMensualRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtRotacionMensualRow(ByVal row As dtRotacionMensualRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtRotacionMensualRow( _
                    ByVal CMRCLR As String,  _
                    ByVal TMRCD2 As String,  _
                    ByVal NORDSR As String,  _
                    ByVal INGRESOS_01 As Decimal,  _
                    ByVal DESPACHO_01 As Decimal,  _
                    ByVal STOCK_01 As Decimal,  _
                    ByVal INGRESOS_02 As Decimal,  _
                    ByVal DESPACHO_02 As Decimal,  _
                    ByVal STOCK_02 As Decimal,  _
                    ByVal INGRESOS_03 As Decimal,  _
                    ByVal DESPACHO_03 As Decimal,  _
                    ByVal STOCK_03 As Decimal,  _
                    ByVal INGRESOS_04 As Decimal,  _
                    ByVal DESPACHO_04 As Decimal,  _
                    ByVal STOCK_04 As Decimal,  _
                    ByVal INGRESOS_05 As Decimal,  _
                    ByVal DESPACHO_05 As Decimal,  _
                    ByVal STOCK_05 As Decimal,  _
                    ByVal INGRESOS_06 As Decimal,  _
                    ByVal DESPACHO_06 As Double,  _
                    ByVal STOCK_06 As Decimal,  _
                    ByVal INGRESOS_07 As Decimal,  _
                    ByVal DESPACHO_07 As Decimal,  _
                    ByVal STOCK_07 As Decimal,  _
                    ByVal INGRESOS_08 As Decimal,  _
                    ByVal DESPACHO_08 As Decimal,  _
                    ByVal STOCK_08 As Decimal,  _
                    ByVal INGRESOS_09 As Decimal,  _
                    ByVal DESPACHO_09 As Decimal,  _
                    ByVal STOCK_09 As Decimal,  _
                    ByVal INGRESOS_10 As Decimal,  _
                    ByVal DESPACHO_10 As Decimal,  _
                    ByVal STOCK_10 As Decimal,  _
                    ByVal INGRESOS_11 As Decimal,  _
                    ByVal DESPACHO_11 As Decimal,  _
                    ByVal STOCK_11 As Decimal,  _
                    ByVal INGRESOS_12 As Decimal,  _
                    ByVal DESPACHO_12 As Decimal,  _
                    ByVal STOCK_12 As Decimal,  _
                    ByVal SUMA_DES As String,  _
                    ByVal SUMA_ING As String,  _
                    ByVal PORCENTAJE As Integer,  _
                    ByVal STOCK_INI As String,  _
                    ByVal STOCK_FIN As String,  _
                    ByVal STOCK_PROM As String) As dtRotacionMensualRow
            Dim rowdtRotacionMensualRow As dtRotacionMensualRow = CType(Me.NewRow,dtRotacionMensualRow)
            Dim columnValuesArray() As Object = New Object() {CMRCLR, TMRCD2, NORDSR, INGRESOS_01, DESPACHO_01, STOCK_01, INGRESOS_02, DESPACHO_02, STOCK_02, INGRESOS_03, DESPACHO_03, STOCK_03, INGRESOS_04, DESPACHO_04, STOCK_04, INGRESOS_05, DESPACHO_05, STOCK_05, INGRESOS_06, DESPACHO_06, STOCK_06, INGRESOS_07, DESPACHO_07, STOCK_07, INGRESOS_08, DESPACHO_08, STOCK_08, INGRESOS_09, DESPACHO_09, STOCK_09, INGRESOS_10, DESPACHO_10, STOCK_10, INGRESOS_11, DESPACHO_11, STOCK_11, INGRESOS_12, DESPACHO_12, STOCK_12, SUMA_DES, SUMA_ING, PORCENTAJE, STOCK_INI, STOCK_FIN, STOCK_PROM}
            rowdtRotacionMensualRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtRotacionMensualRow)
            Return rowdtRotacionMensualRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtRotacionMensualDataTable = CType(MyBase.Clone,dtRotacionMensualDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtRotacionMensualDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCMRCLR = MyBase.Columns("CMRCLR")
            Me.columnTMRCD2 = MyBase.Columns("TMRCD2")
            Me.columnNORDSR = MyBase.Columns("NORDSR")
            Me.columnINGRESOS_01 = MyBase.Columns("INGRESOS_01")
            Me.columnDESPACHO_01 = MyBase.Columns("DESPACHO_01")
            Me.columnSTOCK_01 = MyBase.Columns("STOCK_01")
            Me.columnINGRESOS_02 = MyBase.Columns("INGRESOS_02")
            Me.columnDESPACHO_02 = MyBase.Columns("DESPACHO_02")
            Me.columnSTOCK_02 = MyBase.Columns("STOCK_02")
            Me.columnINGRESOS_03 = MyBase.Columns("INGRESOS_03")
            Me.columnDESPACHO_03 = MyBase.Columns("DESPACHO_03")
            Me.columnSTOCK_03 = MyBase.Columns("STOCK_03")
            Me.columnINGRESOS_04 = MyBase.Columns("INGRESOS_04")
            Me.columnDESPACHO_04 = MyBase.Columns("DESPACHO_04")
            Me.columnSTOCK_04 = MyBase.Columns("STOCK_04")
            Me.columnINGRESOS_05 = MyBase.Columns("INGRESOS_05")
            Me.columnDESPACHO_05 = MyBase.Columns("DESPACHO_05")
            Me.columnSTOCK_05 = MyBase.Columns("STOCK_05")
            Me.columnINGRESOS_06 = MyBase.Columns("INGRESOS_06")
            Me.columnDESPACHO_06 = MyBase.Columns("DESPACHO_06")
            Me.columnSTOCK_06 = MyBase.Columns("STOCK_06")
            Me.columnINGRESOS_07 = MyBase.Columns("INGRESOS_07")
            Me.columnDESPACHO_07 = MyBase.Columns("DESPACHO_07")
            Me.columnSTOCK_07 = MyBase.Columns("STOCK_07")
            Me.columnINGRESOS_08 = MyBase.Columns("INGRESOS_08")
            Me.columnDESPACHO_08 = MyBase.Columns("DESPACHO_08")
            Me.columnSTOCK_08 = MyBase.Columns("STOCK_08")
            Me.columnINGRESOS_09 = MyBase.Columns("INGRESOS_09")
            Me.columnDESPACHO_09 = MyBase.Columns("DESPACHO_09")
            Me.columnSTOCK_09 = MyBase.Columns("STOCK_09")
            Me.columnINGRESOS_10 = MyBase.Columns("INGRESOS_10")
            Me.columnDESPACHO_10 = MyBase.Columns("DESPACHO_10")
            Me.columnSTOCK_10 = MyBase.Columns("STOCK_10")
            Me.columnINGRESOS_11 = MyBase.Columns("INGRESOS_11")
            Me.columnDESPACHO_11 = MyBase.Columns("DESPACHO_11")
            Me.columnSTOCK_11 = MyBase.Columns("STOCK_11")
            Me.columnINGRESOS_12 = MyBase.Columns("INGRESOS_12")
            Me.columnDESPACHO_12 = MyBase.Columns("DESPACHO_12")
            Me.columnSTOCK_12 = MyBase.Columns("STOCK_12")
            Me.columnSUMA_DES = MyBase.Columns("SUMA_DES")
            Me.columnSUMA_ING = MyBase.Columns("SUMA_ING")
            Me.columnPORCENTAJE = MyBase.Columns("PORCENTAJE")
            Me.columnSTOCK_INI = MyBase.Columns("STOCK_INI")
            Me.columnSTOCK_FIN = MyBase.Columns("STOCK_FIN")
            Me.columnSTOCK_PROM = MyBase.Columns("STOCK_PROM")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCMRCLR = New Global.System.Data.DataColumn("CMRCLR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCMRCLR)
            Me.columnTMRCD2 = New Global.System.Data.DataColumn("TMRCD2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTMRCD2)
            Me.columnNORDSR = New Global.System.Data.DataColumn("NORDSR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNORDSR)
            Me.columnINGRESOS_01 = New Global.System.Data.DataColumn("INGRESOS_01", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINGRESOS_01)
            Me.columnDESPACHO_01 = New Global.System.Data.DataColumn("DESPACHO_01", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESPACHO_01)
            Me.columnSTOCK_01 = New Global.System.Data.DataColumn("STOCK_01", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTOCK_01)
            Me.columnINGRESOS_02 = New Global.System.Data.DataColumn("INGRESOS_02", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINGRESOS_02)
            Me.columnDESPACHO_02 = New Global.System.Data.DataColumn("DESPACHO_02", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESPACHO_02)
            Me.columnSTOCK_02 = New Global.System.Data.DataColumn("STOCK_02", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTOCK_02)
            Me.columnINGRESOS_03 = New Global.System.Data.DataColumn("INGRESOS_03", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINGRESOS_03)
            Me.columnDESPACHO_03 = New Global.System.Data.DataColumn("DESPACHO_03", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESPACHO_03)
            Me.columnSTOCK_03 = New Global.System.Data.DataColumn("STOCK_03", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTOCK_03)
            Me.columnINGRESOS_04 = New Global.System.Data.DataColumn("INGRESOS_04", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINGRESOS_04)
            Me.columnDESPACHO_04 = New Global.System.Data.DataColumn("DESPACHO_04", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESPACHO_04)
            Me.columnSTOCK_04 = New Global.System.Data.DataColumn("STOCK_04", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTOCK_04)
            Me.columnINGRESOS_05 = New Global.System.Data.DataColumn("INGRESOS_05", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINGRESOS_05)
            Me.columnDESPACHO_05 = New Global.System.Data.DataColumn("DESPACHO_05", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESPACHO_05)
            Me.columnSTOCK_05 = New Global.System.Data.DataColumn("STOCK_05", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTOCK_05)
            Me.columnINGRESOS_06 = New Global.System.Data.DataColumn("INGRESOS_06", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINGRESOS_06)
            Me.columnDESPACHO_06 = New Global.System.Data.DataColumn("DESPACHO_06", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESPACHO_06)
            Me.columnSTOCK_06 = New Global.System.Data.DataColumn("STOCK_06", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTOCK_06)
            Me.columnINGRESOS_07 = New Global.System.Data.DataColumn("INGRESOS_07", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINGRESOS_07)
            Me.columnDESPACHO_07 = New Global.System.Data.DataColumn("DESPACHO_07", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESPACHO_07)
            Me.columnSTOCK_07 = New Global.System.Data.DataColumn("STOCK_07", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTOCK_07)
            Me.columnINGRESOS_08 = New Global.System.Data.DataColumn("INGRESOS_08", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINGRESOS_08)
            Me.columnDESPACHO_08 = New Global.System.Data.DataColumn("DESPACHO_08", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESPACHO_08)
            Me.columnSTOCK_08 = New Global.System.Data.DataColumn("STOCK_08", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTOCK_08)
            Me.columnINGRESOS_09 = New Global.System.Data.DataColumn("INGRESOS_09", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINGRESOS_09)
            Me.columnDESPACHO_09 = New Global.System.Data.DataColumn("DESPACHO_09", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESPACHO_09)
            Me.columnSTOCK_09 = New Global.System.Data.DataColumn("STOCK_09", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTOCK_09)
            Me.columnINGRESOS_10 = New Global.System.Data.DataColumn("INGRESOS_10", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINGRESOS_10)
            Me.columnDESPACHO_10 = New Global.System.Data.DataColumn("DESPACHO_10", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESPACHO_10)
            Me.columnSTOCK_10 = New Global.System.Data.DataColumn("STOCK_10", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTOCK_10)
            Me.columnINGRESOS_11 = New Global.System.Data.DataColumn("INGRESOS_11", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINGRESOS_11)
            Me.columnDESPACHO_11 = New Global.System.Data.DataColumn("DESPACHO_11", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESPACHO_11)
            Me.columnSTOCK_11 = New Global.System.Data.DataColumn("STOCK_11", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTOCK_11)
            Me.columnINGRESOS_12 = New Global.System.Data.DataColumn("INGRESOS_12", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINGRESOS_12)
            Me.columnDESPACHO_12 = New Global.System.Data.DataColumn("DESPACHO_12", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESPACHO_12)
            Me.columnSTOCK_12 = New Global.System.Data.DataColumn("STOCK_12", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTOCK_12)
            Me.columnSUMA_DES = New Global.System.Data.DataColumn("SUMA_DES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUMA_DES)
            Me.columnSUMA_ING = New Global.System.Data.DataColumn("SUMA_ING", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUMA_ING)
            Me.columnPORCENTAJE = New Global.System.Data.DataColumn("PORCENTAJE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPORCENTAJE)
            Me.columnSTOCK_INI = New Global.System.Data.DataColumn("STOCK_INI", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTOCK_INI)
            Me.columnSTOCK_FIN = New Global.System.Data.DataColumn("STOCK_FIN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTOCK_FIN)
            Me.columnSTOCK_PROM = New Global.System.Data.DataColumn("STOCK_PROM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTOCK_PROM)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtRotacionMensualRow() As dtRotacionMensualRow
            Return CType(Me.NewRow,dtRotacionMensualRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtRotacionMensualRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtRotacionMensualRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtRotacionMensualRowChangedEvent) Is Nothing) Then
                RaiseEvent dtRotacionMensualRowChanged(Me, New dtRotacionMensualRowChangeEvent(CType(e.Row,dtRotacionMensualRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtRotacionMensualRowChangingEvent) Is Nothing) Then
                RaiseEvent dtRotacionMensualRowChanging(Me, New dtRotacionMensualRowChangeEvent(CType(e.Row,dtRotacionMensualRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtRotacionMensualRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtRotacionMensualRowDeleted(Me, New dtRotacionMensualRowChangeEvent(CType(e.Row,dtRotacionMensualRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtRotacionMensualRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtRotacionMensualRowDeleting(Me, New dtRotacionMensualRowChangeEvent(CType(e.Row,dtRotacionMensualRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtRotacionMensualRow(ByVal row As dtRotacionMensualRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReportes = New dsReportes
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtRotacionMensualDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtRepMenCIRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtRepMenCI As dtRepMenCIDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtRepMenCI = CType(Me.Table,dtRepMenCIDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TCMPCL() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRepMenCI.TCMPCLColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TCMPCL' de la tabla 'dtRepMenCI' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepMenCI.TCMPCLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NORCML() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRepMenCI.NORCMLColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NORCML' de la tabla 'dtRepMenCI' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepMenCI.NORCMLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRPARC() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRepMenCI.NRPARCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NRPARC' de la tabla 'dtRepMenCI' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepMenCI.NRPARCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TPRVCL() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRepMenCI.TPRVCLColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TPRVCL' de la tabla 'dtRepMenCI' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepMenCI.TPRVCLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TDITES() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRepMenCI.TDITESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TDITES' de la tabla 'dtRepMenCI' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepMenCI.TDITESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FSOLIC() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRepMenCI.FSOLICColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FSOLIC' de la tabla 'dtRepMenCI' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepMenCI.FSOLICColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FENTPV() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRepMenCI.FENTPVColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FENTPV' de la tabla 'dtRepMenCI' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepMenCI.FENTPVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FRJAPV() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRepMenCI.FRJAPVColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FRJAPV' de la tabla 'dtRepMenCI' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepMenCI.FRJAPVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FIALEM() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRepMenCI.FIALEMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FIALEM' de la tabla 'dtRepMenCI' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepMenCI.FIALEMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NBLTAR() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRepMenCI.NBLTARColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NBLTAR' de la tabla 'dtRepMenCI' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepMenCI.NBLTARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QPSOAR() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRepMenCI.QPSOARColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'QPSOAR' de la tabla 'dtRepMenCI' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepMenCI.QPSOARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TNMMDT() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRepMenCI.TNMMDTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TNMMDT' de la tabla 'dtRepMenCI' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepMenCI.TNMMDTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TTINTC() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRepMenCI.TTINTCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TTINTC' de la tabla 'dtRepMenCI' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepMenCI.TTINTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMFAC() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRepMenCI.NUMFACColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NUMFAC' de la tabla 'dtRepMenCI' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepMenCI.NUMFACColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TLGEMB() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRepMenCI.TLGEMBColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TLGEMB' de la tabla 'dtRepMenCI' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepMenCI.TLGEMBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAPREV() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRepMenCI.FAPREVColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAPREV' de la tabla 'dtRepMenCI' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepMenCI.FAPREVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TNMAGC() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRepMenCI.TNMAGCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TNMAGC' de la tabla 'dtRepMenCI' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepMenCI.TNMAGCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TCMPVP() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRepMenCI.TCMPVPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TCMPVP' de la tabla 'dtRepMenCI' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepMenCI.TCMPVPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAPRAR() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRepMenCI.FAPRARColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAPRAR' de la tabla 'dtRepMenCI' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepMenCI.FAPRARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTCMPCLNull() As Boolean
            Return Me.IsNull(Me.tabledtRepMenCI.TCMPCLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTCMPCLNull()
            Me(Me.tabledtRepMenCI.TCMPCLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNORCMLNull() As Boolean
            Return Me.IsNull(Me.tabledtRepMenCI.NORCMLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNORCMLNull()
            Me(Me.tabledtRepMenCI.NORCMLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNRPARCNull() As Boolean
            Return Me.IsNull(Me.tabledtRepMenCI.NRPARCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNRPARCNull()
            Me(Me.tabledtRepMenCI.NRPARCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTPRVCLNull() As Boolean
            Return Me.IsNull(Me.tabledtRepMenCI.TPRVCLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTPRVCLNull()
            Me(Me.tabledtRepMenCI.TPRVCLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTDITESNull() As Boolean
            Return Me.IsNull(Me.tabledtRepMenCI.TDITESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTDITESNull()
            Me(Me.tabledtRepMenCI.TDITESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFSOLICNull() As Boolean
            Return Me.IsNull(Me.tabledtRepMenCI.FSOLICColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFSOLICNull()
            Me(Me.tabledtRepMenCI.FSOLICColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFENTPVNull() As Boolean
            Return Me.IsNull(Me.tabledtRepMenCI.FENTPVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFENTPVNull()
            Me(Me.tabledtRepMenCI.FENTPVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFRJAPVNull() As Boolean
            Return Me.IsNull(Me.tabledtRepMenCI.FRJAPVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFRJAPVNull()
            Me(Me.tabledtRepMenCI.FRJAPVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFIALEMNull() As Boolean
            Return Me.IsNull(Me.tabledtRepMenCI.FIALEMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFIALEMNull()
            Me(Me.tabledtRepMenCI.FIALEMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNBLTARNull() As Boolean
            Return Me.IsNull(Me.tabledtRepMenCI.NBLTARColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNBLTARNull()
            Me(Me.tabledtRepMenCI.NBLTARColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQPSOARNull() As Boolean
            Return Me.IsNull(Me.tabledtRepMenCI.QPSOARColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQPSOARNull()
            Me(Me.tabledtRepMenCI.QPSOARColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTNMMDTNull() As Boolean
            Return Me.IsNull(Me.tabledtRepMenCI.TNMMDTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTNMMDTNull()
            Me(Me.tabledtRepMenCI.TNMMDTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTTINTCNull() As Boolean
            Return Me.IsNull(Me.tabledtRepMenCI.TTINTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTTINTCNull()
            Me(Me.tabledtRepMenCI.TTINTCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNUMFACNull() As Boolean
            Return Me.IsNull(Me.tabledtRepMenCI.NUMFACColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNUMFACNull()
            Me(Me.tabledtRepMenCI.NUMFACColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTLGEMBNull() As Boolean
            Return Me.IsNull(Me.tabledtRepMenCI.TLGEMBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTLGEMBNull()
            Me(Me.tabledtRepMenCI.TLGEMBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAPREVNull() As Boolean
            Return Me.IsNull(Me.tabledtRepMenCI.FAPREVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAPREVNull()
            Me(Me.tabledtRepMenCI.FAPREVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTNMAGCNull() As Boolean
            Return Me.IsNull(Me.tabledtRepMenCI.TNMAGCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTNMAGCNull()
            Me(Me.tabledtRepMenCI.TNMAGCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTCMPVPNull() As Boolean
            Return Me.IsNull(Me.tabledtRepMenCI.TCMPVPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTCMPVPNull()
            Me(Me.tabledtRepMenCI.TCMPVPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAPRARNull() As Boolean
            Return Me.IsNull(Me.tabledtRepMenCI.FAPRARColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAPRARNull()
            Me(Me.tabledtRepMenCI.FAPRARColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtRepMenSARow
        Inherits Global.System.Data.DataRow
        
        Private tabledtRepMenSA As dtRepMenSADataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtRepMenSA = CType(Me.Table,dtRepMenSADataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TCMPCL() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRepMenSA.TCMPCLColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TCMPCL' de la tabla 'dtRepMenSA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepMenSA.TCMPCLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NORCML() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRepMenSA.NORCMLColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NORCML' de la tabla 'dtRepMenSA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepMenSA.NORCMLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PNNMOS() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRepMenSA.PNNMOSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PNNMOS' de la tabla 'dtRepMenSA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepMenSA.PNNMOSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REGIMEN() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRepMenSA.REGIMENColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'REGIMEN' de la tabla 'dtRepMenSA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepMenSA.REGIMENColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FDCCMP() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRepMenSA.FDCCMPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FDCCMP' de la tabla 'dtRepMenSA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepMenSA.FDCCMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESPACHO() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRepMenSA.DESPACHOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESPACHO' de la tabla 'dtRepMenSA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepMenSA.DESPACHOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TNMMDT() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRepMenSA.TNMMDTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TNMMDT' de la tabla 'dtRepMenSA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepMenSA.TNMMDTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NBLTAR() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRepMenSA.NBLTARColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NBLTAR' de la tabla 'dtRepMenSA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepMenSA.NBLTARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QPSOAR() As Double
            Get
                Try 
                    Return CType(Me(Me.tabledtRepMenSA.QPSOARColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'QPSOAR' de la tabla 'dtRepMenSA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepMenSA.QPSOARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOB() As Double
            Get
                Try 
                    Return CType(Me(Me.tabledtRepMenSA.FOBColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FOB' de la tabla 'dtRepMenSA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepMenSA.FOBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FLETE() As Double
            Get
                Try 
                    Return CType(Me(Me.tabledtRepMenSA.FLETEColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FLETE' de la tabla 'dtRepMenSA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepMenSA.FLETEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SEGURO() As Double
            Get
                Try 
                    Return CType(Me(Me.tabledtRepMenSA.SEGUROColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SEGURO' de la tabla 'dtRepMenSA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepMenSA.SEGUROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CIF() As Double
            Get
                Try 
                    Return CType(Me(Me.tabledtRepMenSA.CIFColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CIF' de la tabla 'dtRepMenSA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepMenSA.CIFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADVALOREM() As Double
            Get
                Try 
                    Return CType(Me(Me.tabledtRepMenSA.ADVALOREMColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ADVALOREM' de la tabla 'dtRepMenSA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepMenSA.ADVALOREMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IGVPM() As Double
            Get
                Try 
                    Return CType(Me(Me.tabledtRepMenSA.IGVPMColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IGVPM' de la tabla 'dtRepMenSA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepMenSA.IGVPMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DUA() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRepMenSA.DUAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DUA' de la tabla 'dtRepMenSA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepMenSA.DUAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NDIADN() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtRepMenSA.NDIADNColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NDIADN' de la tabla 'dtRepMenSA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepMenSA.NDIADNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CANAL() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRepMenSA.CANALColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CANAL' de la tabla 'dtRepMenSA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepMenSA.CANALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DIFATETA() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtRepMenSA.DIFATETAColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DIFATETA' de la tabla 'dtRepMenSA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepMenSA.DIFATETAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EXW() As Double
            Get
                Try 
                    Return CType(Me(Me.tabledtRepMenSA.EXWColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EXW' de la tabla 'dtRepMenSA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepMenSA.EXWColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GFOB() As Double
            Get
                Try 
                    Return CType(Me(Me.tabledtRepMenSA.GFOBColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'GFOB' de la tabla 'dtRepMenSA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepMenSA.GFOBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OGASTOS() As Double
            Get
                Try 
                    Return CType(Me(Me.tabledtRepMenSA.OGASTOSColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OGASTOS' de la tabla 'dtRepMenSA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepMenSA.OGASTOSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAPRAR() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRepMenSA.FAPRARColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAPRAR' de la tabla 'dtRepMenSA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepMenSA.FAPRARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECALM() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRepMenSA.FECALMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECALM' de la tabla 'dtRepMenSA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepMenSA.FECALMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NCONTEN() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtRepMenSA.NCONTENColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NCONTEN' de la tabla 'dtRepMenSA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepMenSA.NCONTENColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTDER() As Double
            Get
                Try 
                    Return CType(Me(Me.tabledtRepMenSA.TOTDERColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TOTDER' de la tabla 'dtRepMenSA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepMenSA.TOTDERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DOCUMENTOS() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRepMenSA.DOCUMENTOSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DOCUMENTOS' de la tabla 'dtRepMenSA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepMenSA.DOCUMENTOSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMERACION() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRepMenSA.NUMERACIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NUMERACION' de la tabla 'dtRepMenSA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepMenSA.NUMERACIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DERECHOS() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRepMenSA.DERECHOSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DERECHOS' de la tabla 'dtRepMenSA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepMenSA.DERECHOSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DIFDOCUMENTOS() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtRepMenSA.DIFDOCUMENTOSColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DIFDOCUMENTOS' de la tabla 'dtRepMenSA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepMenSA.DIFDOCUMENTOSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DIFNUMERACION() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtRepMenSA.DIFNUMERACIONColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DIFNUMERACION' de la tabla 'dtRepMenSA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepMenSA.DIFNUMERACIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DIFDERECHOS() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtRepMenSA.DIFDERECHOSColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DIFDERECHOS' de la tabla 'dtRepMenSA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepMenSA.DIFDERECHOSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTCMPCLNull() As Boolean
            Return Me.IsNull(Me.tabledtRepMenSA.TCMPCLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTCMPCLNull()
            Me(Me.tabledtRepMenSA.TCMPCLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNORCMLNull() As Boolean
            Return Me.IsNull(Me.tabledtRepMenSA.NORCMLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNORCMLNull()
            Me(Me.tabledtRepMenSA.NORCMLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPNNMOSNull() As Boolean
            Return Me.IsNull(Me.tabledtRepMenSA.PNNMOSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPNNMOSNull()
            Me(Me.tabledtRepMenSA.PNNMOSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsREGIMENNull() As Boolean
            Return Me.IsNull(Me.tabledtRepMenSA.REGIMENColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetREGIMENNull()
            Me(Me.tabledtRepMenSA.REGIMENColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFDCCMPNull() As Boolean
            Return Me.IsNull(Me.tabledtRepMenSA.FDCCMPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFDCCMPNull()
            Me(Me.tabledtRepMenSA.FDCCMPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESPACHONull() As Boolean
            Return Me.IsNull(Me.tabledtRepMenSA.DESPACHOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESPACHONull()
            Me(Me.tabledtRepMenSA.DESPACHOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTNMMDTNull() As Boolean
            Return Me.IsNull(Me.tabledtRepMenSA.TNMMDTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTNMMDTNull()
            Me(Me.tabledtRepMenSA.TNMMDTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNBLTARNull() As Boolean
            Return Me.IsNull(Me.tabledtRepMenSA.NBLTARColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNBLTARNull()
            Me(Me.tabledtRepMenSA.NBLTARColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQPSOARNull() As Boolean
            Return Me.IsNull(Me.tabledtRepMenSA.QPSOARColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQPSOARNull()
            Me(Me.tabledtRepMenSA.QPSOARColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOBNull() As Boolean
            Return Me.IsNull(Me.tabledtRepMenSA.FOBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOBNull()
            Me(Me.tabledtRepMenSA.FOBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFLETENull() As Boolean
            Return Me.IsNull(Me.tabledtRepMenSA.FLETEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFLETENull()
            Me(Me.tabledtRepMenSA.FLETEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSEGURONull() As Boolean
            Return Me.IsNull(Me.tabledtRepMenSA.SEGUROColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSEGURONull()
            Me(Me.tabledtRepMenSA.SEGUROColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCIFNull() As Boolean
            Return Me.IsNull(Me.tabledtRepMenSA.CIFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCIFNull()
            Me(Me.tabledtRepMenSA.CIFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsADVALOREMNull() As Boolean
            Return Me.IsNull(Me.tabledtRepMenSA.ADVALOREMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetADVALOREMNull()
            Me(Me.tabledtRepMenSA.ADVALOREMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIGVPMNull() As Boolean
            Return Me.IsNull(Me.tabledtRepMenSA.IGVPMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIGVPMNull()
            Me(Me.tabledtRepMenSA.IGVPMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDUANull() As Boolean
            Return Me.IsNull(Me.tabledtRepMenSA.DUAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDUANull()
            Me(Me.tabledtRepMenSA.DUAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNDIADNNull() As Boolean
            Return Me.IsNull(Me.tabledtRepMenSA.NDIADNColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNDIADNNull()
            Me(Me.tabledtRepMenSA.NDIADNColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCANALNull() As Boolean
            Return Me.IsNull(Me.tabledtRepMenSA.CANALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCANALNull()
            Me(Me.tabledtRepMenSA.CANALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDIFATETANull() As Boolean
            Return Me.IsNull(Me.tabledtRepMenSA.DIFATETAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDIFATETANull()
            Me(Me.tabledtRepMenSA.DIFATETAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEXWNull() As Boolean
            Return Me.IsNull(Me.tabledtRepMenSA.EXWColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEXWNull()
            Me(Me.tabledtRepMenSA.EXWColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGFOBNull() As Boolean
            Return Me.IsNull(Me.tabledtRepMenSA.GFOBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGFOBNull()
            Me(Me.tabledtRepMenSA.GFOBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOGASTOSNull() As Boolean
            Return Me.IsNull(Me.tabledtRepMenSA.OGASTOSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOGASTOSNull()
            Me(Me.tabledtRepMenSA.OGASTOSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAPRARNull() As Boolean
            Return Me.IsNull(Me.tabledtRepMenSA.FAPRARColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAPRARNull()
            Me(Me.tabledtRepMenSA.FAPRARColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECALMNull() As Boolean
            Return Me.IsNull(Me.tabledtRepMenSA.FECALMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECALMNull()
            Me(Me.tabledtRepMenSA.FECALMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNCONTENNull() As Boolean
            Return Me.IsNull(Me.tabledtRepMenSA.NCONTENColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNCONTENNull()
            Me(Me.tabledtRepMenSA.NCONTENColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTDERNull() As Boolean
            Return Me.IsNull(Me.tabledtRepMenSA.TOTDERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTDERNull()
            Me(Me.tabledtRepMenSA.TOTDERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDOCUMENTOSNull() As Boolean
            Return Me.IsNull(Me.tabledtRepMenSA.DOCUMENTOSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDOCUMENTOSNull()
            Me(Me.tabledtRepMenSA.DOCUMENTOSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNUMERACIONNull() As Boolean
            Return Me.IsNull(Me.tabledtRepMenSA.NUMERACIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNUMERACIONNull()
            Me(Me.tabledtRepMenSA.NUMERACIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDERECHOSNull() As Boolean
            Return Me.IsNull(Me.tabledtRepMenSA.DERECHOSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDERECHOSNull()
            Me(Me.tabledtRepMenSA.DERECHOSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDIFDOCUMENTOSNull() As Boolean
            Return Me.IsNull(Me.tabledtRepMenSA.DIFDOCUMENTOSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDIFDOCUMENTOSNull()
            Me(Me.tabledtRepMenSA.DIFDOCUMENTOSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDIFNUMERACIONNull() As Boolean
            Return Me.IsNull(Me.tabledtRepMenSA.DIFNUMERACIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDIFNUMERACIONNull()
            Me(Me.tabledtRepMenSA.DIFNUMERACIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDIFDERECHOSNull() As Boolean
            Return Me.IsNull(Me.tabledtRepMenSA.DIFDERECHOSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDIFDERECHOSNull()
            Me(Me.tabledtRepMenSA.DIFDERECHOSColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtTotalRegimenRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtTotalRegimen As dtTotalRegimenDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtTotalRegimen = CType(Me.Table,dtTotalRegimenDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TCMPCL() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtTotalRegimen.TCMPCLColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TCMPCL' de la tabla 'dtTotalRegimen' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtTotalRegimen.TCMPCLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIMPDEF() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtTotalRegimen.TIMPDEFColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TIMPDEF' de la tabla 'dtTotalRegimen' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtTotalRegimen.TIMPDEFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIMPTEM() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtTotalRegimen.TIMPTEMColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TIMPTEM' de la tabla 'dtTotalRegimen' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtTotalRegimen.TIMPTEMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TDEPOSI() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtTotalRegimen.TDEPOSIColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TDEPOSI' de la tabla 'dtTotalRegimen' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtTotalRegimen.TDEPOSIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TADMTEM() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtTotalRegimen.TADMTEMColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TADMTEM' de la tabla 'dtTotalRegimen' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtTotalRegimen.TADMTEMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TSIMPLIF() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtTotalRegimen.TSIMPLIFColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TSIMPLIF' de la tabla 'dtTotalRegimen' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtTotalRegimen.TSIMPLIFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TREIMPO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtTotalRegimen.TREIMPOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TREIMPO' de la tabla 'dtTotalRegimen' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtTotalRegimen.TREIMPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TEXPDEF() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtTotalRegimen.TEXPDEFColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TEXPDEF' de la tabla 'dtTotalRegimen' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtTotalRegimen.TEXPDEFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TEXPTEM() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtTotalRegimen.TEXPTEMColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TEXPTEM' de la tabla 'dtTotalRegimen' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtTotalRegimen.TEXPTEMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TREEXPO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtTotalRegimen.TREEXPOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TREEXPO' de la tabla 'dtTotalRegimen' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtTotalRegimen.TREEXPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TREEMBA() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtTotalRegimen.TREEMBAColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TREEMBA' de la tabla 'dtTotalRegimen' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtTotalRegimen.TREEMBAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TTRANSB() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtTotalRegimen.TTRANSBColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TTRANSB' de la tabla 'dtTotalRegimen' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtTotalRegimen.TTRANSBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TTRANSI() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtTotalRegimen.TTRANSIColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TTRANSI' de la tabla 'dtTotalRegimen' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtTotalRegimen.TTRANSIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TNACDEP() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtTotalRegimen.TNACDEPColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TNACDEP' de la tabla 'dtTotalRegimen' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtTotalRegimen.TNACDEPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIMPCON() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtTotalRegimen.TIMPCONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TIMPCON' de la tabla 'dtTotalRegimen' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtTotalRegimen.TIMPCONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TADMPER() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtTotalRegimen.TADMPERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TADMPER' de la tabla 'dtTotalRegimen' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtTotalRegimen.TADMPERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TADMREE() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtTotalRegimen.TADMREEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TADMREE' de la tabla 'dtTotalRegimen' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtTotalRegimen.TADMREEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TEXPREI() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtTotalRegimen.TEXPREIColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TEXPREI' de la tabla 'dtTotalRegimen' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtTotalRegimen.TEXPREIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TEXPPER() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtTotalRegimen.TEXPPERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TEXPPER' de la tabla 'dtTotalRegimen' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtTotalRegimen.TEXPPERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTCMPCLNull() As Boolean
            Return Me.IsNull(Me.tabledtTotalRegimen.TCMPCLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTCMPCLNull()
            Me(Me.tabledtTotalRegimen.TCMPCLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIMPDEFNull() As Boolean
            Return Me.IsNull(Me.tabledtTotalRegimen.TIMPDEFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIMPDEFNull()
            Me(Me.tabledtTotalRegimen.TIMPDEFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIMPTEMNull() As Boolean
            Return Me.IsNull(Me.tabledtTotalRegimen.TIMPTEMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIMPTEMNull()
            Me(Me.tabledtTotalRegimen.TIMPTEMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTDEPOSINull() As Boolean
            Return Me.IsNull(Me.tabledtTotalRegimen.TDEPOSIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTDEPOSINull()
            Me(Me.tabledtTotalRegimen.TDEPOSIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTADMTEMNull() As Boolean
            Return Me.IsNull(Me.tabledtTotalRegimen.TADMTEMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTADMTEMNull()
            Me(Me.tabledtTotalRegimen.TADMTEMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTSIMPLIFNull() As Boolean
            Return Me.IsNull(Me.tabledtTotalRegimen.TSIMPLIFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTSIMPLIFNull()
            Me(Me.tabledtTotalRegimen.TSIMPLIFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTREIMPONull() As Boolean
            Return Me.IsNull(Me.tabledtTotalRegimen.TREIMPOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTREIMPONull()
            Me(Me.tabledtTotalRegimen.TREIMPOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTEXPDEFNull() As Boolean
            Return Me.IsNull(Me.tabledtTotalRegimen.TEXPDEFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTEXPDEFNull()
            Me(Me.tabledtTotalRegimen.TEXPDEFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTEXPTEMNull() As Boolean
            Return Me.IsNull(Me.tabledtTotalRegimen.TEXPTEMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTEXPTEMNull()
            Me(Me.tabledtTotalRegimen.TEXPTEMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTREEXPONull() As Boolean
            Return Me.IsNull(Me.tabledtTotalRegimen.TREEXPOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTREEXPONull()
            Me(Me.tabledtTotalRegimen.TREEXPOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTREEMBANull() As Boolean
            Return Me.IsNull(Me.tabledtTotalRegimen.TREEMBAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTREEMBANull()
            Me(Me.tabledtTotalRegimen.TREEMBAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTTRANSBNull() As Boolean
            Return Me.IsNull(Me.tabledtTotalRegimen.TTRANSBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTTRANSBNull()
            Me(Me.tabledtTotalRegimen.TTRANSBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTTRANSINull() As Boolean
            Return Me.IsNull(Me.tabledtTotalRegimen.TTRANSIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTTRANSINull()
            Me(Me.tabledtTotalRegimen.TTRANSIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTNACDEPNull() As Boolean
            Return Me.IsNull(Me.tabledtTotalRegimen.TNACDEPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTNACDEPNull()
            Me(Me.tabledtTotalRegimen.TNACDEPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIMPCONNull() As Boolean
            Return Me.IsNull(Me.tabledtTotalRegimen.TIMPCONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIMPCONNull()
            Me(Me.tabledtTotalRegimen.TIMPCONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTADMPERNull() As Boolean
            Return Me.IsNull(Me.tabledtTotalRegimen.TADMPERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTADMPERNull()
            Me(Me.tabledtTotalRegimen.TADMPERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTADMREENull() As Boolean
            Return Me.IsNull(Me.tabledtTotalRegimen.TADMREEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTADMREENull()
            Me(Me.tabledtTotalRegimen.TADMREEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTEXPREINull() As Boolean
            Return Me.IsNull(Me.tabledtTotalRegimen.TEXPREIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTEXPREINull()
            Me(Me.tabledtTotalRegimen.TEXPREIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTEXPPERNull() As Boolean
            Return Me.IsNull(Me.tabledtTotalRegimen.TEXPPERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTEXPPERNull()
            Me(Me.tabledtTotalRegimen.TEXPPERColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtTotalEnvioRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtTotalEnvio As dtTotalEnvioDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtTotalEnvio = CType(Me.Table,dtTotalEnvioDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TCMPCL() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtTotalEnvio.TCMPCLColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TCMPCL' de la tabla 'dtTotalEnvio' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtTotalEnvio.TCMPCLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TCOURIER() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtTotalEnvio.TCOURIERColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TCOURIER' de la tabla 'dtTotalEnvio' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtTotalEnvio.TCOURIERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TAEREO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtTotalEnvio.TAEREOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TAEREO' de la tabla 'dtTotalEnvio' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtTotalEnvio.TAEREOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TMARITIMO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtTotalEnvio.TMARITIMOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TMARITIMO' de la tabla 'dtTotalEnvio' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtTotalEnvio.TMARITIMOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TTERRESTRE() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtTotalEnvio.TTERRESTREColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TTERRESTRE' de la tabla 'dtTotalEnvio' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtTotalEnvio.TTERRESTREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTCMPCLNull() As Boolean
            Return Me.IsNull(Me.tabledtTotalEnvio.TCMPCLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTCMPCLNull()
            Me(Me.tabledtTotalEnvio.TCMPCLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTCOURIERNull() As Boolean
            Return Me.IsNull(Me.tabledtTotalEnvio.TCOURIERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTCOURIERNull()
            Me(Me.tabledtTotalEnvio.TCOURIERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTAEREONull() As Boolean
            Return Me.IsNull(Me.tabledtTotalEnvio.TAEREOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTAEREONull()
            Me(Me.tabledtTotalEnvio.TAEREOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTMARITIMONull() As Boolean
            Return Me.IsNull(Me.tabledtTotalEnvio.TMARITIMOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTMARITIMONull()
            Me(Me.tabledtTotalEnvio.TMARITIMOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTTERRESTRENull() As Boolean
            Return Me.IsNull(Me.tabledtTotalEnvio.TTERRESTREColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTTERRESTRENull()
            Me(Me.tabledtTotalEnvio.TTERRESTREColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtRepMenAdnRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtRepMenAdn As dtRepMenAdnDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtRepMenAdn = CType(Me.Table,dtRepMenAdnDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TCMPCL() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRepMenAdn.TCMPCLColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TCMPCL' de la tabla 'dtRepMenAdn' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepMenAdn.TCMPCLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NORCML() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRepMenAdn.NORCMLColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NORCML' de la tabla 'dtRepMenAdn' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepMenAdn.NORCMLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PNNMOS() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRepMenAdn.PNNMOSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PNNMOS' de la tabla 'dtRepMenAdn' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepMenAdn.PNNMOSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAPOPE() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRepMenAdn.FAPOPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAPOPE' de la tabla 'dtRepMenAdn' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepMenAdn.FAPOPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAPRAR() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRepMenAdn.FAPRARColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FAPRAR' de la tabla 'dtRepMenAdn' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepMenAdn.FAPRARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LEVANTE() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRepMenAdn.LEVANTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'LEVANTE' de la tabla 'dtRepMenAdn' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepMenAdn.LEVANTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ALMCLI() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRepMenAdn.ALMCLIColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ALMCLI' de la tabla 'dtRepMenAdn' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepMenAdn.ALMCLIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PERIODO() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRepMenAdn.PERIODOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PERIODO' de la tabla 'dtRepMenAdn' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepMenAdn.PERIODOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DIF_DIA1() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRepMenAdn.DIF_DIA1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DIF_DIA1' de la tabla 'dtRepMenAdn' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepMenAdn.DIF_DIA1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DIF_DIA2() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRepMenAdn.DIF_DIA2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DIF_DIA2' de la tabla 'dtRepMenAdn' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepMenAdn.DIF_DIA2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTCMPCLNull() As Boolean
            Return Me.IsNull(Me.tabledtRepMenAdn.TCMPCLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTCMPCLNull()
            Me(Me.tabledtRepMenAdn.TCMPCLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNORCMLNull() As Boolean
            Return Me.IsNull(Me.tabledtRepMenAdn.NORCMLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNORCMLNull()
            Me(Me.tabledtRepMenAdn.NORCMLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPNNMOSNull() As Boolean
            Return Me.IsNull(Me.tabledtRepMenAdn.PNNMOSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPNNMOSNull()
            Me(Me.tabledtRepMenAdn.PNNMOSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAPOPENull() As Boolean
            Return Me.IsNull(Me.tabledtRepMenAdn.FAPOPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAPOPENull()
            Me(Me.tabledtRepMenAdn.FAPOPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAPRARNull() As Boolean
            Return Me.IsNull(Me.tabledtRepMenAdn.FAPRARColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAPRARNull()
            Me(Me.tabledtRepMenAdn.FAPRARColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLEVANTENull() As Boolean
            Return Me.IsNull(Me.tabledtRepMenAdn.LEVANTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLEVANTENull()
            Me(Me.tabledtRepMenAdn.LEVANTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsALMCLINull() As Boolean
            Return Me.IsNull(Me.tabledtRepMenAdn.ALMCLIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetALMCLINull()
            Me(Me.tabledtRepMenAdn.ALMCLIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPERIODONull() As Boolean
            Return Me.IsNull(Me.tabledtRepMenAdn.PERIODOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPERIODONull()
            Me(Me.tabledtRepMenAdn.PERIODOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDIF_DIA1Null() As Boolean
            Return Me.IsNull(Me.tabledtRepMenAdn.DIF_DIA1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDIF_DIA1Null()
            Me(Me.tabledtRepMenAdn.DIF_DIA1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDIF_DIA2Null() As Boolean
            Return Me.IsNull(Me.tabledtRepMenAdn.DIF_DIA2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDIF_DIA2Null()
            Me(Me.tabledtRepMenAdn.DIF_DIA2Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtRepEntregaEmbAlmRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtRepEntregaEmbAlm As dtRepEntregaEmbAlmDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtRepEntregaEmbAlm = CType(Me.Table,dtRepEntregaEmbAlmDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CCLNT() As Double
            Get
                Try 
                    Return CType(Me(Me.tabledtRepEntregaEmbAlm.CCLNTColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CCLNT' de la tabla 'dtRepEntregaEmbAlm' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepEntregaEmbAlm.CCLNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TCMPCL() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRepEntregaEmbAlm.TCMPCLColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TCMPCL' de la tabla 'dtRepEntregaEmbAlm' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepEntregaEmbAlm.TCMPCLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NORSCI() As Double
            Get
                Try 
                    Return CType(Me(Me.tabledtRepEntregaEmbAlm.NORSCIColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NORSCI' de la tabla 'dtRepEntregaEmbAlm' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepEntregaEmbAlm.NORSCIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PNNMOS() As Double
            Get
                Try 
                    Return CType(Me(Me.tabledtRepEntregaEmbAlm.PNNMOSColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PNNMOS' de la tabla 'dtRepEntregaEmbAlm' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepEntregaEmbAlm.PNNMOSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CAGNCR() As Double
            Get
                Try 
                    Return CType(Me(Me.tabledtRepEntregaEmbAlm.CAGNCRColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CAGNCR' de la tabla 'dtRepEntregaEmbAlm' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepEntregaEmbAlm.CAGNCRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TNMAGC() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRepEntregaEmbAlm.TNMAGCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TNMAGC' de la tabla 'dtRepEntregaEmbAlm' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepEntregaEmbAlm.TNMAGCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TCANAL() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRepEntregaEmbAlm.TCANALColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TCANAL' de la tabla 'dtRepEntregaEmbAlm' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepEntregaEmbAlm.TCANALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TNRODU() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRepEntregaEmbAlm.TNRODUColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TNRODU' de la tabla 'dtRepEntregaEmbAlm' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepEntregaEmbAlm.TNRODUColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NDOCEM() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRepEntregaEmbAlm.NDOCEMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NDOCEM' de la tabla 'dtRepEntregaEmbAlm' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepEntregaEmbAlm.NDOCEMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REFDO1() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRepEntregaEmbAlm.REFDO1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'REFDO1' de la tabla 'dtRepEntregaEmbAlm' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepEntregaEmbAlm.REFDO1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FRETES() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRepEntregaEmbAlm.FRETESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FRETES' de la tabla 'dtRepEntregaEmbAlm' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepEntregaEmbAlm.FRETESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NORCML() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRepEntregaEmbAlm.NORCMLColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NORCML' de la tabla 'dtRepEntregaEmbAlm' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepEntregaEmbAlm.NORCMLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CMRCLR() As Double
            Get
                Try 
                    Return CType(Me(Me.tabledtRepEntregaEmbAlm.CMRCLRColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CMRCLR' de la tabla 'dtRepEntregaEmbAlm' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepEntregaEmbAlm.CMRCLRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QRLCSC() As Double
            Get
                Try 
                    Return CType(Me(Me.tabledtRepEntregaEmbAlm.QRLCSCColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'QRLCSC' de la tabla 'dtRepEntregaEmbAlm' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepEntregaEmbAlm.QRLCSCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NORDSR() As Double
            Get
                Try 
                    Return CType(Me(Me.tabledtRepEntregaEmbAlm.NORDSRColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NORDSR' de la tabla 'dtRepEntregaEmbAlm' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepEntregaEmbAlm.NORDSRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FSLCSR() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRepEntregaEmbAlm.FSLCSRColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FSLCSR' de la tabla 'dtRepEntregaEmbAlm' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepEntregaEmbAlm.FSLCSRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QTRMC() As Double
            Get
                Try 
                    Return CType(Me(Me.tabledtRepEntregaEmbAlm.QTRMCColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'QTRMC' de la tabla 'dtRepEntregaEmbAlm' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepEntregaEmbAlm.QTRMCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NGUIRN() As Double
            Get
                Try 
                    Return CType(Me(Me.tabledtRepEntregaEmbAlm.NGUIRNColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NGUIRN' de la tabla 'dtRepEntregaEmbAlm' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepEntregaEmbAlm.NGUIRNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ETA() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRepEntregaEmbAlm.ETAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ETA' de la tabla 'dtRepEntregaEmbAlm' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepEntregaEmbAlm.ETAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ETD() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRepEntregaEmbAlm.ETDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ETD' de la tabla 'dtRepEntregaEmbAlm' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepEntregaEmbAlm.ETDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DIF_FECHAS() As Double
            Get
                Try 
                    Return CType(Me(Me.tabledtRepEntregaEmbAlm.DIF_FECHASColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DIF_FECHAS' de la tabla 'dtRepEntregaEmbAlm' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepEntregaEmbAlm.DIF_FECHASColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TDITES() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRepEntregaEmbAlm.TDITESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TDITES' de la tabla 'dtRepEntregaEmbAlm' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepEntregaEmbAlm.TDITESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FRLZSR() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRepEntregaEmbAlm.FRLZSRColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FRLZSR' de la tabla 'dtRepEntregaEmbAlm' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepEntregaEmbAlm.FRLZSRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TPRVCL() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRepEntregaEmbAlm.TPRVCLColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TPRVCL' de la tabla 'dtRepEntregaEmbAlm' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepEntregaEmbAlm.TPRVCLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NGUICL() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRepEntregaEmbAlm.NGUICLColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NGUICL' de la tabla 'dtRepEntregaEmbAlm' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepEntregaEmbAlm.NGUICLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TTINTC() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRepEntregaEmbAlm.TTINTCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TTINTC' de la tabla 'dtRepEntregaEmbAlm' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepEntregaEmbAlm.TTINTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIPO() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRepEntregaEmbAlm.TIPOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TIPO' de la tabla 'dtRepEntregaEmbAlm' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRepEntregaEmbAlm.TIPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCCLNTNull() As Boolean
            Return Me.IsNull(Me.tabledtRepEntregaEmbAlm.CCLNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCCLNTNull()
            Me(Me.tabledtRepEntregaEmbAlm.CCLNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTCMPCLNull() As Boolean
            Return Me.IsNull(Me.tabledtRepEntregaEmbAlm.TCMPCLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTCMPCLNull()
            Me(Me.tabledtRepEntregaEmbAlm.TCMPCLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNORSCINull() As Boolean
            Return Me.IsNull(Me.tabledtRepEntregaEmbAlm.NORSCIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNORSCINull()
            Me(Me.tabledtRepEntregaEmbAlm.NORSCIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPNNMOSNull() As Boolean
            Return Me.IsNull(Me.tabledtRepEntregaEmbAlm.PNNMOSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPNNMOSNull()
            Me(Me.tabledtRepEntregaEmbAlm.PNNMOSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCAGNCRNull() As Boolean
            Return Me.IsNull(Me.tabledtRepEntregaEmbAlm.CAGNCRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCAGNCRNull()
            Me(Me.tabledtRepEntregaEmbAlm.CAGNCRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTNMAGCNull() As Boolean
            Return Me.IsNull(Me.tabledtRepEntregaEmbAlm.TNMAGCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTNMAGCNull()
            Me(Me.tabledtRepEntregaEmbAlm.TNMAGCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTCANALNull() As Boolean
            Return Me.IsNull(Me.tabledtRepEntregaEmbAlm.TCANALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTCANALNull()
            Me(Me.tabledtRepEntregaEmbAlm.TCANALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTNRODUNull() As Boolean
            Return Me.IsNull(Me.tabledtRepEntregaEmbAlm.TNRODUColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTNRODUNull()
            Me(Me.tabledtRepEntregaEmbAlm.TNRODUColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNDOCEMNull() As Boolean
            Return Me.IsNull(Me.tabledtRepEntregaEmbAlm.NDOCEMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNDOCEMNull()
            Me(Me.tabledtRepEntregaEmbAlm.NDOCEMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsREFDO1Null() As Boolean
            Return Me.IsNull(Me.tabledtRepEntregaEmbAlm.REFDO1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetREFDO1Null()
            Me(Me.tabledtRepEntregaEmbAlm.REFDO1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFRETESNull() As Boolean
            Return Me.IsNull(Me.tabledtRepEntregaEmbAlm.FRETESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFRETESNull()
            Me(Me.tabledtRepEntregaEmbAlm.FRETESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNORCMLNull() As Boolean
            Return Me.IsNull(Me.tabledtRepEntregaEmbAlm.NORCMLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNORCMLNull()
            Me(Me.tabledtRepEntregaEmbAlm.NORCMLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCMRCLRNull() As Boolean
            Return Me.IsNull(Me.tabledtRepEntregaEmbAlm.CMRCLRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCMRCLRNull()
            Me(Me.tabledtRepEntregaEmbAlm.CMRCLRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQRLCSCNull() As Boolean
            Return Me.IsNull(Me.tabledtRepEntregaEmbAlm.QRLCSCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQRLCSCNull()
            Me(Me.tabledtRepEntregaEmbAlm.QRLCSCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNORDSRNull() As Boolean
            Return Me.IsNull(Me.tabledtRepEntregaEmbAlm.NORDSRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNORDSRNull()
            Me(Me.tabledtRepEntregaEmbAlm.NORDSRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFSLCSRNull() As Boolean
            Return Me.IsNull(Me.tabledtRepEntregaEmbAlm.FSLCSRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFSLCSRNull()
            Me(Me.tabledtRepEntregaEmbAlm.FSLCSRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQTRMCNull() As Boolean
            Return Me.IsNull(Me.tabledtRepEntregaEmbAlm.QTRMCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQTRMCNull()
            Me(Me.tabledtRepEntregaEmbAlm.QTRMCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNGUIRNNull() As Boolean
            Return Me.IsNull(Me.tabledtRepEntregaEmbAlm.NGUIRNColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNGUIRNNull()
            Me(Me.tabledtRepEntregaEmbAlm.NGUIRNColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsETANull() As Boolean
            Return Me.IsNull(Me.tabledtRepEntregaEmbAlm.ETAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetETANull()
            Me(Me.tabledtRepEntregaEmbAlm.ETAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsETDNull() As Boolean
            Return Me.IsNull(Me.tabledtRepEntregaEmbAlm.ETDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetETDNull()
            Me(Me.tabledtRepEntregaEmbAlm.ETDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDIF_FECHASNull() As Boolean
            Return Me.IsNull(Me.tabledtRepEntregaEmbAlm.DIF_FECHASColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDIF_FECHASNull()
            Me(Me.tabledtRepEntregaEmbAlm.DIF_FECHASColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTDITESNull() As Boolean
            Return Me.IsNull(Me.tabledtRepEntregaEmbAlm.TDITESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTDITESNull()
            Me(Me.tabledtRepEntregaEmbAlm.TDITESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFRLZSRNull() As Boolean
            Return Me.IsNull(Me.tabledtRepEntregaEmbAlm.FRLZSRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFRLZSRNull()
            Me(Me.tabledtRepEntregaEmbAlm.FRLZSRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTPRVCLNull() As Boolean
            Return Me.IsNull(Me.tabledtRepEntregaEmbAlm.TPRVCLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTPRVCLNull()
            Me(Me.tabledtRepEntregaEmbAlm.TPRVCLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNGUICLNull() As Boolean
            Return Me.IsNull(Me.tabledtRepEntregaEmbAlm.NGUICLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNGUICLNull()
            Me(Me.tabledtRepEntregaEmbAlm.NGUICLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTTINTCNull() As Boolean
            Return Me.IsNull(Me.tabledtRepEntregaEmbAlm.TTINTCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTTINTCNull()
            Me(Me.tabledtRepEntregaEmbAlm.TTINTCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIPONull() As Boolean
            Return Me.IsNull(Me.tabledtRepEntregaEmbAlm.TIPOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIPONull()
            Me(Me.tabledtRepEntregaEmbAlm.TIPOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtRegimenRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtRegimen As dtRegimenDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtRegimen = CType(Me.Table,dtRegimenDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Regimen() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRegimen.RegimenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Regimen' de la tabla 'dtRegimen' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRegimen.RegimenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cantidad() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtRegimen.CantidadColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cantidad' de la tabla 'dtRegimen' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRegimen.CantidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Codigo() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRegimen.CodigoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Codigo' de la tabla 'dtRegimen' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRegimen.CodigoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRegimenNull() As Boolean
            Return Me.IsNull(Me.tabledtRegimen.RegimenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRegimenNull()
            Me(Me.tabledtRegimen.RegimenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadNull() As Boolean
            Return Me.IsNull(Me.tabledtRegimen.CantidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadNull()
            Me(Me.tabledtRegimen.CantidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoNull() As Boolean
            Return Me.IsNull(Me.tabledtRegimen.CodigoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoNull()
            Me(Me.tabledtRegimen.CodigoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtIngresoRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtIngreso As dtIngresoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtIngreso = CType(Me.Table,dtIngresoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CMRCLR() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtIngreso.CMRCLRColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CMRCLR' de la tabla 'dtIngreso' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtIngreso.CMRCLRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESMER() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtIngreso.DESMERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESMER' de la tabla 'dtIngreso' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtIngreso.DESMERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CANTIDAD() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtIngreso.CANTIDADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CANTIDAD' de la tabla 'dtIngreso' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtIngreso.CANTIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UNIDAD() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtIngreso.UNIDADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'UNIDAD' de la tabla 'dtIngreso' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtIngreso.UNIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PORCENTAJE() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtIngreso.PORCENTAJEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PORCENTAJE' de la tabla 'dtIngreso' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtIngreso.PORCENTAJEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCMRCLRNull() As Boolean
            Return Me.IsNull(Me.tabledtIngreso.CMRCLRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCMRCLRNull()
            Me(Me.tabledtIngreso.CMRCLRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESMERNull() As Boolean
            Return Me.IsNull(Me.tabledtIngreso.DESMERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESMERNull()
            Me(Me.tabledtIngreso.DESMERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCANTIDADNull() As Boolean
            Return Me.IsNull(Me.tabledtIngreso.CANTIDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCANTIDADNull()
            Me(Me.tabledtIngreso.CANTIDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUNIDADNull() As Boolean
            Return Me.IsNull(Me.tabledtIngreso.UNIDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUNIDADNull()
            Me(Me.tabledtIngreso.UNIDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPORCENTAJENull() As Boolean
            Return Me.IsNull(Me.tabledtIngreso.PORCENTAJEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPORCENTAJENull()
            Me(Me.tabledtIngreso.PORCENTAJEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtStockRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtStock As dtStockDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtStock = CType(Me.Table,dtStockDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CMRCLR() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtStock.CMRCLRColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CMRCLR' de la tabla 'dtStock' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtStock.CMRCLRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NORDSR() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtStock.NORDSRColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NORDSR' de la tabla 'dtStock' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtStock.NORDSRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CMRCD() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtStock.CMRCDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CMRCD' de la tabla 'dtStock' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtStock.CMRCDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TMRCD2() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtStock.TMRCD2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TMRCD2' de la tabla 'dtStock' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtStock.TMRCD2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QSLMC() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtStock.QSLMCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'QSLMC' de la tabla 'dtStock' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtStock.QSLMCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CUNCN5() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtStock.CUNCN5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CUNCN5' de la tabla 'dtStock' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtStock.CUNCN5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QMRSRC() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtStock.QMRSRCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'QMRSRC' de la tabla 'dtStock' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtStock.QMRSRCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCMRCLRNull() As Boolean
            Return Me.IsNull(Me.tabledtStock.CMRCLRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCMRCLRNull()
            Me(Me.tabledtStock.CMRCLRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNORDSRNull() As Boolean
            Return Me.IsNull(Me.tabledtStock.NORDSRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNORDSRNull()
            Me(Me.tabledtStock.NORDSRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCMRCDNull() As Boolean
            Return Me.IsNull(Me.tabledtStock.CMRCDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCMRCDNull()
            Me(Me.tabledtStock.CMRCDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTMRCD2Null() As Boolean
            Return Me.IsNull(Me.tabledtStock.TMRCD2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTMRCD2Null()
            Me(Me.tabledtStock.TMRCD2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQSLMCNull() As Boolean
            Return Me.IsNull(Me.tabledtStock.QSLMCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQSLMCNull()
            Me(Me.tabledtStock.QSLMCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCUNCN5Null() As Boolean
            Return Me.IsNull(Me.tabledtStock.CUNCN5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCUNCN5Null()
            Me(Me.tabledtStock.CUNCN5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQMRSRCNull() As Boolean
            Return Me.IsNull(Me.tabledtStock.QMRSRCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQMRSRCNull()
            Me(Me.tabledtStock.QMRSRCColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtDespachoRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtDespacho As dtDespachoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtDespacho = CType(Me.Table,dtDespachoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CMRCLR() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtDespacho.CMRCLRColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CMRCLR' de la tabla 'dtDespacho' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtDespacho.CMRCLRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESMER() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtDespacho.DESMERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESMER' de la tabla 'dtDespacho' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtDespacho.DESMERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CANTIDAD() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtDespacho.CANTIDADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CANTIDAD' de la tabla 'dtDespacho' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtDespacho.CANTIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UNIDAD() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtDespacho.UNIDADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'UNIDAD' de la tabla 'dtDespacho' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtDespacho.UNIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PORCENTAJE() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtDespacho.PORCENTAJEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PORCENTAJE' de la tabla 'dtDespacho' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtDespacho.PORCENTAJEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCMRCLRNull() As Boolean
            Return Me.IsNull(Me.tabledtDespacho.CMRCLRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCMRCLRNull()
            Me(Me.tabledtDespacho.CMRCLRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESMERNull() As Boolean
            Return Me.IsNull(Me.tabledtDespacho.DESMERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESMERNull()
            Me(Me.tabledtDespacho.DESMERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCANTIDADNull() As Boolean
            Return Me.IsNull(Me.tabledtDespacho.CANTIDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCANTIDADNull()
            Me(Me.tabledtDespacho.CANTIDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUNIDADNull() As Boolean
            Return Me.IsNull(Me.tabledtDespacho.UNIDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUNIDADNull()
            Me(Me.tabledtDespacho.UNIDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPORCENTAJENull() As Boolean
            Return Me.IsNull(Me.tabledtDespacho.PORCENTAJEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPORCENTAJENull()
            Me(Me.tabledtDespacho.PORCENTAJEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtDespachoStockRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtDespachoStock As dtDespachoStockDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtDespachoStock = CType(Me.Table,dtDespachoStockDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CMRCLR() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtDespachoStock.CMRCLRColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CMRCLR' de la tabla 'dtDespachoStock' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtDespachoStock.CMRCLRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESMER() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtDespachoStock.DESMERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESMER' de la tabla 'dtDespachoStock' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtDespachoStock.DESMERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QING() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtDespachoStock.QINGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'QING' de la tabla 'dtDespachoStock' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtDespachoStock.QINGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QSAL() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtDespachoStock.QSALColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'QSAL' de la tabla 'dtDespachoStock' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtDespachoStock.QSALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UNIDAD() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtDespachoStock.UNIDADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'UNIDAD' de la tabla 'dtDespachoStock' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtDespachoStock.UNIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROCENTAJEI() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtDespachoStock.PROCENTAJEIColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PROCENTAJEI' de la tabla 'dtDespachoStock' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtDespachoStock.PROCENTAJEIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROCENTAJED() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtDespachoStock.PROCENTAJEDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PROCENTAJED' de la tabla 'dtDespachoStock' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtDespachoStock.PROCENTAJEDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCMRCLRNull() As Boolean
            Return Me.IsNull(Me.tabledtDespachoStock.CMRCLRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCMRCLRNull()
            Me(Me.tabledtDespachoStock.CMRCLRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESMERNull() As Boolean
            Return Me.IsNull(Me.tabledtDespachoStock.DESMERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESMERNull()
            Me(Me.tabledtDespachoStock.DESMERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQINGNull() As Boolean
            Return Me.IsNull(Me.tabledtDespachoStock.QINGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQINGNull()
            Me(Me.tabledtDespachoStock.QINGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQSALNull() As Boolean
            Return Me.IsNull(Me.tabledtDespachoStock.QSALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQSALNull()
            Me(Me.tabledtDespachoStock.QSALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUNIDADNull() As Boolean
            Return Me.IsNull(Me.tabledtDespachoStock.UNIDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUNIDADNull()
            Me(Me.tabledtDespachoStock.UNIDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPROCENTAJEINull() As Boolean
            Return Me.IsNull(Me.tabledtDespachoStock.PROCENTAJEIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPROCENTAJEINull()
            Me(Me.tabledtDespachoStock.PROCENTAJEIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPROCENTAJEDNull() As Boolean
            Return Me.IsNull(Me.tabledtDespachoStock.PROCENTAJEDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPROCENTAJEDNull()
            Me(Me.tabledtDespachoStock.PROCENTAJEDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtRotacionMensualRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtRotacionMensual As dtRotacionMensualDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtRotacionMensual = CType(Me.Table,dtRotacionMensualDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CMRCLR() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRotacionMensual.CMRCLRColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CMRCLR' de la tabla 'dtRotacionMensual' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRotacionMensual.CMRCLRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TMRCD2() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRotacionMensual.TMRCD2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TMRCD2' de la tabla 'dtRotacionMensual' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRotacionMensual.TMRCD2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NORDSR() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRotacionMensual.NORDSRColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NORDSR' de la tabla 'dtRotacionMensual' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRotacionMensual.NORDSRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INGRESOS_01() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtRotacionMensual.INGRESOS_01Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'INGRESOS_01' de la tabla 'dtRotacionMensual' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRotacionMensual.INGRESOS_01Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESPACHO_01() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtRotacionMensual.DESPACHO_01Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESPACHO_01' de la tabla 'dtRotacionMensual' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRotacionMensual.DESPACHO_01Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STOCK_01() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtRotacionMensual.STOCK_01Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'STOCK_01' de la tabla 'dtRotacionMensual' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRotacionMensual.STOCK_01Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INGRESOS_02() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtRotacionMensual.INGRESOS_02Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'INGRESOS_02' de la tabla 'dtRotacionMensual' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRotacionMensual.INGRESOS_02Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESPACHO_02() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtRotacionMensual.DESPACHO_02Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESPACHO_02' de la tabla 'dtRotacionMensual' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRotacionMensual.DESPACHO_02Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STOCK_02() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtRotacionMensual.STOCK_02Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'STOCK_02' de la tabla 'dtRotacionMensual' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRotacionMensual.STOCK_02Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INGRESOS_03() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtRotacionMensual.INGRESOS_03Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'INGRESOS_03' de la tabla 'dtRotacionMensual' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRotacionMensual.INGRESOS_03Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESPACHO_03() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtRotacionMensual.DESPACHO_03Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESPACHO_03' de la tabla 'dtRotacionMensual' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRotacionMensual.DESPACHO_03Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STOCK_03() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtRotacionMensual.STOCK_03Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'STOCK_03' de la tabla 'dtRotacionMensual' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRotacionMensual.STOCK_03Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INGRESOS_04() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtRotacionMensual.INGRESOS_04Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'INGRESOS_04' de la tabla 'dtRotacionMensual' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRotacionMensual.INGRESOS_04Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESPACHO_04() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtRotacionMensual.DESPACHO_04Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESPACHO_04' de la tabla 'dtRotacionMensual' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRotacionMensual.DESPACHO_04Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STOCK_04() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtRotacionMensual.STOCK_04Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'STOCK_04' de la tabla 'dtRotacionMensual' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRotacionMensual.STOCK_04Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INGRESOS_05() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtRotacionMensual.INGRESOS_05Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'INGRESOS_05' de la tabla 'dtRotacionMensual' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRotacionMensual.INGRESOS_05Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESPACHO_05() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtRotacionMensual.DESPACHO_05Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESPACHO_05' de la tabla 'dtRotacionMensual' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRotacionMensual.DESPACHO_05Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STOCK_05() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtRotacionMensual.STOCK_05Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'STOCK_05' de la tabla 'dtRotacionMensual' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRotacionMensual.STOCK_05Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INGRESOS_06() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtRotacionMensual.INGRESOS_06Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'INGRESOS_06' de la tabla 'dtRotacionMensual' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRotacionMensual.INGRESOS_06Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESPACHO_06() As Double
            Get
                Try 
                    Return CType(Me(Me.tabledtRotacionMensual.DESPACHO_06Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESPACHO_06' de la tabla 'dtRotacionMensual' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRotacionMensual.DESPACHO_06Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STOCK_06() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtRotacionMensual.STOCK_06Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'STOCK_06' de la tabla 'dtRotacionMensual' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRotacionMensual.STOCK_06Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INGRESOS_07() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtRotacionMensual.INGRESOS_07Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'INGRESOS_07' de la tabla 'dtRotacionMensual' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRotacionMensual.INGRESOS_07Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESPACHO_07() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtRotacionMensual.DESPACHO_07Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESPACHO_07' de la tabla 'dtRotacionMensual' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRotacionMensual.DESPACHO_07Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STOCK_07() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtRotacionMensual.STOCK_07Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'STOCK_07' de la tabla 'dtRotacionMensual' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRotacionMensual.STOCK_07Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INGRESOS_08() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtRotacionMensual.INGRESOS_08Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'INGRESOS_08' de la tabla 'dtRotacionMensual' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRotacionMensual.INGRESOS_08Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESPACHO_08() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtRotacionMensual.DESPACHO_08Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESPACHO_08' de la tabla 'dtRotacionMensual' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRotacionMensual.DESPACHO_08Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STOCK_08() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtRotacionMensual.STOCK_08Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'STOCK_08' de la tabla 'dtRotacionMensual' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRotacionMensual.STOCK_08Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INGRESOS_09() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtRotacionMensual.INGRESOS_09Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'INGRESOS_09' de la tabla 'dtRotacionMensual' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRotacionMensual.INGRESOS_09Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESPACHO_09() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtRotacionMensual.DESPACHO_09Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESPACHO_09' de la tabla 'dtRotacionMensual' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRotacionMensual.DESPACHO_09Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STOCK_09() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtRotacionMensual.STOCK_09Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'STOCK_09' de la tabla 'dtRotacionMensual' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRotacionMensual.STOCK_09Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INGRESOS_10() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtRotacionMensual.INGRESOS_10Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'INGRESOS_10' de la tabla 'dtRotacionMensual' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRotacionMensual.INGRESOS_10Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESPACHO_10() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtRotacionMensual.DESPACHO_10Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESPACHO_10' de la tabla 'dtRotacionMensual' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRotacionMensual.DESPACHO_10Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STOCK_10() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtRotacionMensual.STOCK_10Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'STOCK_10' de la tabla 'dtRotacionMensual' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRotacionMensual.STOCK_10Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INGRESOS_11() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtRotacionMensual.INGRESOS_11Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'INGRESOS_11' de la tabla 'dtRotacionMensual' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRotacionMensual.INGRESOS_11Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESPACHO_11() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtRotacionMensual.DESPACHO_11Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESPACHO_11' de la tabla 'dtRotacionMensual' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRotacionMensual.DESPACHO_11Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STOCK_11() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtRotacionMensual.STOCK_11Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'STOCK_11' de la tabla 'dtRotacionMensual' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRotacionMensual.STOCK_11Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INGRESOS_12() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtRotacionMensual.INGRESOS_12Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'INGRESOS_12' de la tabla 'dtRotacionMensual' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRotacionMensual.INGRESOS_12Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESPACHO_12() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtRotacionMensual.DESPACHO_12Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESPACHO_12' de la tabla 'dtRotacionMensual' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRotacionMensual.DESPACHO_12Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STOCK_12() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtRotacionMensual.STOCK_12Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'STOCK_12' de la tabla 'dtRotacionMensual' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRotacionMensual.STOCK_12Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUMA_DES() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRotacionMensual.SUMA_DESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SUMA_DES' de la tabla 'dtRotacionMensual' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRotacionMensual.SUMA_DESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUMA_ING() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRotacionMensual.SUMA_INGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SUMA_ING' de la tabla 'dtRotacionMensual' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRotacionMensual.SUMA_INGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PORCENTAJE() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtRotacionMensual.PORCENTAJEColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PORCENTAJE' de la tabla 'dtRotacionMensual' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRotacionMensual.PORCENTAJEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STOCK_INI() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRotacionMensual.STOCK_INIColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'STOCK_INI' de la tabla 'dtRotacionMensual' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRotacionMensual.STOCK_INIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STOCK_FIN() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRotacionMensual.STOCK_FINColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'STOCK_FIN' de la tabla 'dtRotacionMensual' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRotacionMensual.STOCK_FINColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STOCK_PROM() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRotacionMensual.STOCK_PROMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'STOCK_PROM' de la tabla 'dtRotacionMensual' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRotacionMensual.STOCK_PROMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCMRCLRNull() As Boolean
            Return Me.IsNull(Me.tabledtRotacionMensual.CMRCLRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCMRCLRNull()
            Me(Me.tabledtRotacionMensual.CMRCLRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTMRCD2Null() As Boolean
            Return Me.IsNull(Me.tabledtRotacionMensual.TMRCD2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTMRCD2Null()
            Me(Me.tabledtRotacionMensual.TMRCD2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNORDSRNull() As Boolean
            Return Me.IsNull(Me.tabledtRotacionMensual.NORDSRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNORDSRNull()
            Me(Me.tabledtRotacionMensual.NORDSRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINGRESOS_01Null() As Boolean
            Return Me.IsNull(Me.tabledtRotacionMensual.INGRESOS_01Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINGRESOS_01Null()
            Me(Me.tabledtRotacionMensual.INGRESOS_01Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESPACHO_01Null() As Boolean
            Return Me.IsNull(Me.tabledtRotacionMensual.DESPACHO_01Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESPACHO_01Null()
            Me(Me.tabledtRotacionMensual.DESPACHO_01Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTOCK_01Null() As Boolean
            Return Me.IsNull(Me.tabledtRotacionMensual.STOCK_01Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTOCK_01Null()
            Me(Me.tabledtRotacionMensual.STOCK_01Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINGRESOS_02Null() As Boolean
            Return Me.IsNull(Me.tabledtRotacionMensual.INGRESOS_02Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINGRESOS_02Null()
            Me(Me.tabledtRotacionMensual.INGRESOS_02Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESPACHO_02Null() As Boolean
            Return Me.IsNull(Me.tabledtRotacionMensual.DESPACHO_02Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESPACHO_02Null()
            Me(Me.tabledtRotacionMensual.DESPACHO_02Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTOCK_02Null() As Boolean
            Return Me.IsNull(Me.tabledtRotacionMensual.STOCK_02Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTOCK_02Null()
            Me(Me.tabledtRotacionMensual.STOCK_02Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINGRESOS_03Null() As Boolean
            Return Me.IsNull(Me.tabledtRotacionMensual.INGRESOS_03Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINGRESOS_03Null()
            Me(Me.tabledtRotacionMensual.INGRESOS_03Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESPACHO_03Null() As Boolean
            Return Me.IsNull(Me.tabledtRotacionMensual.DESPACHO_03Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESPACHO_03Null()
            Me(Me.tabledtRotacionMensual.DESPACHO_03Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTOCK_03Null() As Boolean
            Return Me.IsNull(Me.tabledtRotacionMensual.STOCK_03Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTOCK_03Null()
            Me(Me.tabledtRotacionMensual.STOCK_03Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINGRESOS_04Null() As Boolean
            Return Me.IsNull(Me.tabledtRotacionMensual.INGRESOS_04Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINGRESOS_04Null()
            Me(Me.tabledtRotacionMensual.INGRESOS_04Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESPACHO_04Null() As Boolean
            Return Me.IsNull(Me.tabledtRotacionMensual.DESPACHO_04Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESPACHO_04Null()
            Me(Me.tabledtRotacionMensual.DESPACHO_04Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTOCK_04Null() As Boolean
            Return Me.IsNull(Me.tabledtRotacionMensual.STOCK_04Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTOCK_04Null()
            Me(Me.tabledtRotacionMensual.STOCK_04Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINGRESOS_05Null() As Boolean
            Return Me.IsNull(Me.tabledtRotacionMensual.INGRESOS_05Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINGRESOS_05Null()
            Me(Me.tabledtRotacionMensual.INGRESOS_05Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESPACHO_05Null() As Boolean
            Return Me.IsNull(Me.tabledtRotacionMensual.DESPACHO_05Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESPACHO_05Null()
            Me(Me.tabledtRotacionMensual.DESPACHO_05Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTOCK_05Null() As Boolean
            Return Me.IsNull(Me.tabledtRotacionMensual.STOCK_05Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTOCK_05Null()
            Me(Me.tabledtRotacionMensual.STOCK_05Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINGRESOS_06Null() As Boolean
            Return Me.IsNull(Me.tabledtRotacionMensual.INGRESOS_06Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINGRESOS_06Null()
            Me(Me.tabledtRotacionMensual.INGRESOS_06Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESPACHO_06Null() As Boolean
            Return Me.IsNull(Me.tabledtRotacionMensual.DESPACHO_06Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESPACHO_06Null()
            Me(Me.tabledtRotacionMensual.DESPACHO_06Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTOCK_06Null() As Boolean
            Return Me.IsNull(Me.tabledtRotacionMensual.STOCK_06Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTOCK_06Null()
            Me(Me.tabledtRotacionMensual.STOCK_06Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINGRESOS_07Null() As Boolean
            Return Me.IsNull(Me.tabledtRotacionMensual.INGRESOS_07Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINGRESOS_07Null()
            Me(Me.tabledtRotacionMensual.INGRESOS_07Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESPACHO_07Null() As Boolean
            Return Me.IsNull(Me.tabledtRotacionMensual.DESPACHO_07Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESPACHO_07Null()
            Me(Me.tabledtRotacionMensual.DESPACHO_07Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTOCK_07Null() As Boolean
            Return Me.IsNull(Me.tabledtRotacionMensual.STOCK_07Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTOCK_07Null()
            Me(Me.tabledtRotacionMensual.STOCK_07Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINGRESOS_08Null() As Boolean
            Return Me.IsNull(Me.tabledtRotacionMensual.INGRESOS_08Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINGRESOS_08Null()
            Me(Me.tabledtRotacionMensual.INGRESOS_08Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESPACHO_08Null() As Boolean
            Return Me.IsNull(Me.tabledtRotacionMensual.DESPACHO_08Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESPACHO_08Null()
            Me(Me.tabledtRotacionMensual.DESPACHO_08Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTOCK_08Null() As Boolean
            Return Me.IsNull(Me.tabledtRotacionMensual.STOCK_08Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTOCK_08Null()
            Me(Me.tabledtRotacionMensual.STOCK_08Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINGRESOS_09Null() As Boolean
            Return Me.IsNull(Me.tabledtRotacionMensual.INGRESOS_09Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINGRESOS_09Null()
            Me(Me.tabledtRotacionMensual.INGRESOS_09Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESPACHO_09Null() As Boolean
            Return Me.IsNull(Me.tabledtRotacionMensual.DESPACHO_09Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESPACHO_09Null()
            Me(Me.tabledtRotacionMensual.DESPACHO_09Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTOCK_09Null() As Boolean
            Return Me.IsNull(Me.tabledtRotacionMensual.STOCK_09Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTOCK_09Null()
            Me(Me.tabledtRotacionMensual.STOCK_09Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINGRESOS_10Null() As Boolean
            Return Me.IsNull(Me.tabledtRotacionMensual.INGRESOS_10Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINGRESOS_10Null()
            Me(Me.tabledtRotacionMensual.INGRESOS_10Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESPACHO_10Null() As Boolean
            Return Me.IsNull(Me.tabledtRotacionMensual.DESPACHO_10Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESPACHO_10Null()
            Me(Me.tabledtRotacionMensual.DESPACHO_10Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTOCK_10Null() As Boolean
            Return Me.IsNull(Me.tabledtRotacionMensual.STOCK_10Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTOCK_10Null()
            Me(Me.tabledtRotacionMensual.STOCK_10Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINGRESOS_11Null() As Boolean
            Return Me.IsNull(Me.tabledtRotacionMensual.INGRESOS_11Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINGRESOS_11Null()
            Me(Me.tabledtRotacionMensual.INGRESOS_11Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESPACHO_11Null() As Boolean
            Return Me.IsNull(Me.tabledtRotacionMensual.DESPACHO_11Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESPACHO_11Null()
            Me(Me.tabledtRotacionMensual.DESPACHO_11Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTOCK_11Null() As Boolean
            Return Me.IsNull(Me.tabledtRotacionMensual.STOCK_11Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTOCK_11Null()
            Me(Me.tabledtRotacionMensual.STOCK_11Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINGRESOS_12Null() As Boolean
            Return Me.IsNull(Me.tabledtRotacionMensual.INGRESOS_12Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINGRESOS_12Null()
            Me(Me.tabledtRotacionMensual.INGRESOS_12Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESPACHO_12Null() As Boolean
            Return Me.IsNull(Me.tabledtRotacionMensual.DESPACHO_12Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESPACHO_12Null()
            Me(Me.tabledtRotacionMensual.DESPACHO_12Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTOCK_12Null() As Boolean
            Return Me.IsNull(Me.tabledtRotacionMensual.STOCK_12Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTOCK_12Null()
            Me(Me.tabledtRotacionMensual.STOCK_12Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUMA_DESNull() As Boolean
            Return Me.IsNull(Me.tabledtRotacionMensual.SUMA_DESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUMA_DESNull()
            Me(Me.tabledtRotacionMensual.SUMA_DESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUMA_INGNull() As Boolean
            Return Me.IsNull(Me.tabledtRotacionMensual.SUMA_INGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUMA_INGNull()
            Me(Me.tabledtRotacionMensual.SUMA_INGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPORCENTAJENull() As Boolean
            Return Me.IsNull(Me.tabledtRotacionMensual.PORCENTAJEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPORCENTAJENull()
            Me(Me.tabledtRotacionMensual.PORCENTAJEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTOCK_ININull() As Boolean
            Return Me.IsNull(Me.tabledtRotacionMensual.STOCK_INIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTOCK_ININull()
            Me(Me.tabledtRotacionMensual.STOCK_INIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTOCK_FINNull() As Boolean
            Return Me.IsNull(Me.tabledtRotacionMensual.STOCK_FINColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTOCK_FINNull()
            Me(Me.tabledtRotacionMensual.STOCK_FINColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTOCK_PROMNull() As Boolean
            Return Me.IsNull(Me.tabledtRotacionMensual.STOCK_PROMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTOCK_PROMNull()
            Me(Me.tabledtRotacionMensual.STOCK_PROMColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtRepMenCIRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtRepMenCIRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtRepMenCIRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtRepMenCIRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtRepMenSARowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtRepMenSARow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtRepMenSARow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtRepMenSARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtTotalRegimenRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtTotalRegimenRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtTotalRegimenRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtTotalRegimenRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtTotalEnvioRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtTotalEnvioRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtTotalEnvioRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtTotalEnvioRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtRepMenAdnRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtRepMenAdnRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtRepMenAdnRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtRepMenAdnRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtRepEntregaEmbAlmRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtRepEntregaEmbAlmRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtRepEntregaEmbAlmRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtRepEntregaEmbAlmRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtRegimenRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtRegimenRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtRegimenRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtRegimenRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtIngresoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtIngresoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtIngresoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtIngresoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtStockRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtStockRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtStockRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtStockRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtDespachoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtDespachoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtDespachoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtDespachoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtDespachoStockRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtDespachoStockRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtDespachoStockRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtDespachoStockRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtRotacionMensualRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtRotacionMensualRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtRotacionMensualRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtRotacionMensualRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
