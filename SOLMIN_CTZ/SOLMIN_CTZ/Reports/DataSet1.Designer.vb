'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.3607
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DataSet1"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DataSet1
    Inherits Global.System.Data.DataSet
    
    Private tabledtCuentaCorriente As dtCuentaCorrienteDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("dtCuentaCorriente")) Is Nothing) Then
                MyBase.Tables.Add(New dtCuentaCorrienteDataTable(ds.Tables("dtCuentaCorriente")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtCuentaCorriente() As dtCuentaCorrienteDataTable
        Get
            Return Me.tabledtCuentaCorriente
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DataSet1 = CType(MyBase.Clone,DataSet1)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("dtCuentaCorriente")) Is Nothing) Then
                MyBase.Tables.Add(New dtCuentaCorrienteDataTable(ds.Tables("dtCuentaCorriente")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tabledtCuentaCorriente = CType(MyBase.Tables("dtCuentaCorriente"),dtCuentaCorrienteDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtCuentaCorriente) Is Nothing) Then
                Me.tabledtCuentaCorriente.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DataSet1"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DataSet1.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tabledtCuentaCorriente = New dtCuentaCorrienteDataTable
        MyBase.Tables.Add(Me.tabledtCuentaCorriente)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtCuentaCorriente() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DataSet1 = New DataSet1
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub dtCuentaCorrienteRowChangeEventHandler(ByVal sender As Object, ByVal e As dtCuentaCorrienteRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtCuentaCorrienteDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnROWNUMBER As Global.System.Data.DataColumn
        
        Private columnCO_CIAA As Global.System.Data.DataColumn
        
        Private columnCO_DIVI As Global.System.Data.DataColumn
        
        Private columnNU_RUCS As Global.System.Data.DataColumn
        
        Private columnTI_DOCU As Global.System.Data.DataColumn
        
        Private columnNO_DOCU As Global.System.Data.DataColumn
        
        Private columnNU_DOCU As Global.System.Data.DataColumn
        
        Private columnFE_CNTA_CNTE As Global.System.Data.DataColumn
        
        Private columnCO_ZONA As Global.System.Data.DataColumn
        
        Private columnCO_MONE As Global.System.Data.DataColumn
        
        Private columnSI_MONE As Global.System.Data.DataColumn
        
        Private columnIM_SOLE As Global.System.Data.DataColumn
        
        Private columnIM_DOLA As Global.System.Data.DataColumn
        
        Private columnCO_CLIE As Global.System.Data.DataColumn
        
        Private columnNO_CLIE As Global.System.Data.DataColumn
        
        Private columnST_DOCU As Global.System.Data.DataColumn
        
        Private columnST_REGI As Global.System.Data.DataColumn
        
        Private columnCO_SAPP As Global.System.Data.DataColumn
        
        Private columnCO_RUBR_CNTA As Global.System.Data.DataColumn
        
        Private columnTCMTRF As Global.System.Data.DataColumn
        
        Private columnIM_SOLE1 As Global.System.Data.DataColumn
        
        Private columnIM_DOLA1 As Global.System.Data.DataColumn
        
        Private columnCO_TIPO_ALMA As Global.System.Data.DataColumn
        
        Private columnCO_ALMA_DOCU As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtCuentaCorriente"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ROWNUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnROWNUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CO_CIAAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCO_CIAA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CO_DIVIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCO_DIVI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NU_RUCSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNU_RUCS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TI_DOCUColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTI_DOCU
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NO_DOCUColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNO_DOCU
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NU_DOCUColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNU_DOCU
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FE_CNTA_CNTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFE_CNTA_CNTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CO_ZONAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCO_ZONA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CO_MONEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCO_MONE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SI_MONEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSI_MONE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IM_SOLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIM_SOLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IM_DOLAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIM_DOLA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CO_CLIEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCO_CLIE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NO_CLIEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNO_CLIE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ST_DOCUColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnST_DOCU
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ST_REGIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnST_REGI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CO_SAPPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCO_SAPP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CO_RUBR_CNTAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCO_RUBR_CNTA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TCMTRFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTCMTRF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IM_SOLE1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIM_SOLE1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IM_DOLA1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnIM_DOLA1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CO_TIPO_ALMAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCO_TIPO_ALMA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CO_ALMA_DOCUColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCO_ALMA_DOCU
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtCuentaCorrienteRow
            Get
                Return CType(Me.Rows(index),dtCuentaCorrienteRow)
            End Get
        End Property
        
        Public Event dtCuentaCorrienteRowChanging As dtCuentaCorrienteRowChangeEventHandler
        
        Public Event dtCuentaCorrienteRowChanged As dtCuentaCorrienteRowChangeEventHandler
        
        Public Event dtCuentaCorrienteRowDeleting As dtCuentaCorrienteRowChangeEventHandler
        
        Public Event dtCuentaCorrienteRowDeleted As dtCuentaCorrienteRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtCuentaCorrienteRow(ByVal row As dtCuentaCorrienteRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtCuentaCorrienteRow( _
                    ByVal ROWNUMBER As String,  _
                    ByVal CO_CIAA As String,  _
                    ByVal CO_DIVI As String,  _
                    ByVal NU_RUCS As String,  _
                    ByVal TI_DOCU As String,  _
                    ByVal NO_DOCU As String,  _
                    ByVal NU_DOCU As Double,  _
                    ByVal FE_CNTA_CNTE As String,  _
                    ByVal CO_ZONA As String,  _
                    ByVal CO_MONE As String,  _
                    ByVal SI_MONE As String,  _
                    ByVal IM_SOLE As String,  _
                    ByVal IM_DOLA As String,  _
                    ByVal CO_CLIE As String,  _
                    ByVal NO_CLIE As String,  _
                    ByVal ST_DOCU As String,  _
                    ByVal ST_REGI As String,  _
                    ByVal CO_SAPP As String,  _
                    ByVal CO_RUBR_CNTA As Double,  _
                    ByVal TCMTRF As String,  _
                    ByVal IM_SOLE1 As String,  _
                    ByVal IM_DOLA1 As String,  _
                    ByVal CO_TIPO_ALMA As String,  _
                    ByVal CO_ALMA_DOCU As String) As dtCuentaCorrienteRow
            Dim rowdtCuentaCorrienteRow As dtCuentaCorrienteRow = CType(Me.NewRow,dtCuentaCorrienteRow)
            Dim columnValuesArray() As Object = New Object() {ROWNUMBER, CO_CIAA, CO_DIVI, NU_RUCS, TI_DOCU, NO_DOCU, NU_DOCU, FE_CNTA_CNTE, CO_ZONA, CO_MONE, SI_MONE, IM_SOLE, IM_DOLA, CO_CLIE, NO_CLIE, ST_DOCU, ST_REGI, CO_SAPP, CO_RUBR_CNTA, TCMTRF, IM_SOLE1, IM_DOLA1, CO_TIPO_ALMA, CO_ALMA_DOCU}
            rowdtCuentaCorrienteRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtCuentaCorrienteRow)
            Return rowdtCuentaCorrienteRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtCuentaCorrienteDataTable = CType(MyBase.Clone,dtCuentaCorrienteDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtCuentaCorrienteDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnROWNUMBER = MyBase.Columns("ROWNUMBER")
            Me.columnCO_CIAA = MyBase.Columns("CO_CIAA")
            Me.columnCO_DIVI = MyBase.Columns("CO_DIVI")
            Me.columnNU_RUCS = MyBase.Columns("NU_RUCS")
            Me.columnTI_DOCU = MyBase.Columns("TI_DOCU")
            Me.columnNO_DOCU = MyBase.Columns("NO_DOCU")
            Me.columnNU_DOCU = MyBase.Columns("NU_DOCU")
            Me.columnFE_CNTA_CNTE = MyBase.Columns("FE_CNTA_CNTE")
            Me.columnCO_ZONA = MyBase.Columns("CO_ZONA")
            Me.columnCO_MONE = MyBase.Columns("CO_MONE")
            Me.columnSI_MONE = MyBase.Columns("SI_MONE")
            Me.columnIM_SOLE = MyBase.Columns("IM_SOLE")
            Me.columnIM_DOLA = MyBase.Columns("IM_DOLA")
            Me.columnCO_CLIE = MyBase.Columns("CO_CLIE")
            Me.columnNO_CLIE = MyBase.Columns("NO_CLIE")
            Me.columnST_DOCU = MyBase.Columns("ST_DOCU")
            Me.columnST_REGI = MyBase.Columns("ST_REGI")
            Me.columnCO_SAPP = MyBase.Columns("CO_SAPP")
            Me.columnCO_RUBR_CNTA = MyBase.Columns("CO_RUBR_CNTA")
            Me.columnTCMTRF = MyBase.Columns("TCMTRF")
            Me.columnIM_SOLE1 = MyBase.Columns("IM_SOLE1")
            Me.columnIM_DOLA1 = MyBase.Columns("IM_DOLA1")
            Me.columnCO_TIPO_ALMA = MyBase.Columns("CO_TIPO_ALMA")
            Me.columnCO_ALMA_DOCU = MyBase.Columns("CO_ALMA_DOCU")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnROWNUMBER = New Global.System.Data.DataColumn("ROWNUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnROWNUMBER)
            Me.columnCO_CIAA = New Global.System.Data.DataColumn("CO_CIAA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCO_CIAA)
            Me.columnCO_DIVI = New Global.System.Data.DataColumn("CO_DIVI", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCO_DIVI)
            Me.columnNU_RUCS = New Global.System.Data.DataColumn("NU_RUCS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNU_RUCS)
            Me.columnTI_DOCU = New Global.System.Data.DataColumn("TI_DOCU", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTI_DOCU)
            Me.columnNO_DOCU = New Global.System.Data.DataColumn("NO_DOCU", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNO_DOCU)
            Me.columnNU_DOCU = New Global.System.Data.DataColumn("NU_DOCU", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNU_DOCU)
            Me.columnFE_CNTA_CNTE = New Global.System.Data.DataColumn("FE_CNTA_CNTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFE_CNTA_CNTE)
            Me.columnCO_ZONA = New Global.System.Data.DataColumn("CO_ZONA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCO_ZONA)
            Me.columnCO_MONE = New Global.System.Data.DataColumn("CO_MONE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCO_MONE)
            Me.columnSI_MONE = New Global.System.Data.DataColumn("SI_MONE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSI_MONE)
            Me.columnIM_SOLE = New Global.System.Data.DataColumn("IM_SOLE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIM_SOLE)
            Me.columnIM_DOLA = New Global.System.Data.DataColumn("IM_DOLA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIM_DOLA)
            Me.columnCO_CLIE = New Global.System.Data.DataColumn("CO_CLIE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCO_CLIE)
            Me.columnNO_CLIE = New Global.System.Data.DataColumn("NO_CLIE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNO_CLIE)
            Me.columnST_DOCU = New Global.System.Data.DataColumn("ST_DOCU", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnST_DOCU)
            Me.columnST_REGI = New Global.System.Data.DataColumn("ST_REGI", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnST_REGI)
            Me.columnCO_SAPP = New Global.System.Data.DataColumn("CO_SAPP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCO_SAPP)
            Me.columnCO_RUBR_CNTA = New Global.System.Data.DataColumn("CO_RUBR_CNTA", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCO_RUBR_CNTA)
            Me.columnTCMTRF = New Global.System.Data.DataColumn("TCMTRF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTCMTRF)
            Me.columnIM_SOLE1 = New Global.System.Data.DataColumn("IM_SOLE1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIM_SOLE1)
            Me.columnIM_DOLA1 = New Global.System.Data.DataColumn("IM_DOLA1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIM_DOLA1)
            Me.columnCO_TIPO_ALMA = New Global.System.Data.DataColumn("CO_TIPO_ALMA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCO_TIPO_ALMA)
            Me.columnCO_ALMA_DOCU = New Global.System.Data.DataColumn("CO_ALMA_DOCU", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCO_ALMA_DOCU)
            Me.columnCO_CIAA.MaxLength = 10
            Me.columnCO_DIVI.MaxLength = 10
            Me.columnNU_RUCS.MaxLength = 10
            Me.columnTI_DOCU.MaxLength = 10
            Me.columnNO_DOCU.MaxLength = 10
            Me.columnFE_CNTA_CNTE.MaxLength = 10
            Me.columnCO_ZONA.MaxLength = 10
            Me.columnCO_MONE.MaxLength = 10
            Me.columnSI_MONE.MaxLength = 10
            Me.columnIM_SOLE.MaxLength = 10
            Me.columnIM_DOLA.MaxLength = 10
            Me.columnCO_CLIE.MaxLength = 10
            Me.columnNO_CLIE.MaxLength = 10
            Me.columnST_DOCU.MaxLength = 10
            Me.columnST_REGI.MaxLength = 10
            Me.columnCO_SAPP.MaxLength = 10
            Me.columnTCMTRF.MaxLength = 10
            Me.columnIM_SOLE1.MaxLength = 10
            Me.columnIM_DOLA1.MaxLength = 10
            Me.columnCO_TIPO_ALMA.MaxLength = 10
            Me.columnCO_ALMA_DOCU.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtCuentaCorrienteRow() As dtCuentaCorrienteRow
            Return CType(Me.NewRow,dtCuentaCorrienteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtCuentaCorrienteRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtCuentaCorrienteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtCuentaCorrienteRowChangedEvent) Is Nothing) Then
                RaiseEvent dtCuentaCorrienteRowChanged(Me, New dtCuentaCorrienteRowChangeEvent(CType(e.Row,dtCuentaCorrienteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtCuentaCorrienteRowChangingEvent) Is Nothing) Then
                RaiseEvent dtCuentaCorrienteRowChanging(Me, New dtCuentaCorrienteRowChangeEvent(CType(e.Row,dtCuentaCorrienteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtCuentaCorrienteRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtCuentaCorrienteRowDeleted(Me, New dtCuentaCorrienteRowChangeEvent(CType(e.Row,dtCuentaCorrienteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtCuentaCorrienteRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtCuentaCorrienteRowDeleting(Me, New dtCuentaCorrienteRowChangeEvent(CType(e.Row,dtCuentaCorrienteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtCuentaCorrienteRow(ByVal row As dtCuentaCorrienteRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSet1 = New DataSet1
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtCuentaCorrienteDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtCuentaCorrienteRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtCuentaCorriente As dtCuentaCorrienteDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtCuentaCorriente = CType(Me.Table,dtCuentaCorrienteDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ROWNUMBER() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCuentaCorriente.ROWNUMBERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ROWNUMBER' de la tabla 'dtCuentaCorriente' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCuentaCorriente.ROWNUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CO_CIAA() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCuentaCorriente.CO_CIAAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CO_CIAA' de la tabla 'dtCuentaCorriente' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCuentaCorriente.CO_CIAAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CO_DIVI() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCuentaCorriente.CO_DIVIColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CO_DIVI' de la tabla 'dtCuentaCorriente' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCuentaCorriente.CO_DIVIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NU_RUCS() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCuentaCorriente.NU_RUCSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NU_RUCS' de la tabla 'dtCuentaCorriente' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCuentaCorriente.NU_RUCSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TI_DOCU() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCuentaCorriente.TI_DOCUColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TI_DOCU' de la tabla 'dtCuentaCorriente' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCuentaCorriente.TI_DOCUColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NO_DOCU() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCuentaCorriente.NO_DOCUColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NO_DOCU' de la tabla 'dtCuentaCorriente' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCuentaCorriente.NO_DOCUColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NU_DOCU() As Double
            Get
                Try 
                    Return CType(Me(Me.tabledtCuentaCorriente.NU_DOCUColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NU_DOCU' de la tabla 'dtCuentaCorriente' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCuentaCorriente.NU_DOCUColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FE_CNTA_CNTE() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCuentaCorriente.FE_CNTA_CNTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FE_CNTA_CNTE' de la tabla 'dtCuentaCorriente' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCuentaCorriente.FE_CNTA_CNTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CO_ZONA() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCuentaCorriente.CO_ZONAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CO_ZONA' de la tabla 'dtCuentaCorriente' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCuentaCorriente.CO_ZONAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CO_MONE() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCuentaCorriente.CO_MONEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CO_MONE' de la tabla 'dtCuentaCorriente' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCuentaCorriente.CO_MONEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SI_MONE() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCuentaCorriente.SI_MONEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SI_MONE' de la tabla 'dtCuentaCorriente' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCuentaCorriente.SI_MONEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_SOLE() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCuentaCorriente.IM_SOLEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IM_SOLE' de la tabla 'dtCuentaCorriente' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCuentaCorriente.IM_SOLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_DOLA() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCuentaCorriente.IM_DOLAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IM_DOLA' de la tabla 'dtCuentaCorriente' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCuentaCorriente.IM_DOLAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CO_CLIE() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCuentaCorriente.CO_CLIEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CO_CLIE' de la tabla 'dtCuentaCorriente' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCuentaCorriente.CO_CLIEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NO_CLIE() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCuentaCorriente.NO_CLIEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NO_CLIE' de la tabla 'dtCuentaCorriente' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCuentaCorriente.NO_CLIEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ST_DOCU() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCuentaCorriente.ST_DOCUColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ST_DOCU' de la tabla 'dtCuentaCorriente' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCuentaCorriente.ST_DOCUColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ST_REGI() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCuentaCorriente.ST_REGIColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ST_REGI' de la tabla 'dtCuentaCorriente' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCuentaCorriente.ST_REGIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CO_SAPP() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCuentaCorriente.CO_SAPPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CO_SAPP' de la tabla 'dtCuentaCorriente' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCuentaCorriente.CO_SAPPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CO_RUBR_CNTA() As Double
            Get
                Try 
                    Return CType(Me(Me.tabledtCuentaCorriente.CO_RUBR_CNTAColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CO_RUBR_CNTA' de la tabla 'dtCuentaCorriente' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCuentaCorriente.CO_RUBR_CNTAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TCMTRF() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCuentaCorriente.TCMTRFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TCMTRF' de la tabla 'dtCuentaCorriente' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCuentaCorriente.TCMTRFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_SOLE1() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCuentaCorriente.IM_SOLE1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IM_SOLE1' de la tabla 'dtCuentaCorriente' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCuentaCorriente.IM_SOLE1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_DOLA1() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCuentaCorriente.IM_DOLA1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IM_DOLA1' de la tabla 'dtCuentaCorriente' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCuentaCorriente.IM_DOLA1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CO_TIPO_ALMA() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCuentaCorriente.CO_TIPO_ALMAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CO_TIPO_ALMA' de la tabla 'dtCuentaCorriente' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCuentaCorriente.CO_TIPO_ALMAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CO_ALMA_DOCU() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtCuentaCorriente.CO_ALMA_DOCUColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CO_ALMA_DOCU' de la tabla 'dtCuentaCorriente' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtCuentaCorriente.CO_ALMA_DOCUColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsROWNUMBERNull() As Boolean
            Return Me.IsNull(Me.tabledtCuentaCorriente.ROWNUMBERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetROWNUMBERNull()
            Me(Me.tabledtCuentaCorriente.ROWNUMBERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCO_CIAANull() As Boolean
            Return Me.IsNull(Me.tabledtCuentaCorriente.CO_CIAAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCO_CIAANull()
            Me(Me.tabledtCuentaCorriente.CO_CIAAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCO_DIVINull() As Boolean
            Return Me.IsNull(Me.tabledtCuentaCorriente.CO_DIVIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCO_DIVINull()
            Me(Me.tabledtCuentaCorriente.CO_DIVIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNU_RUCSNull() As Boolean
            Return Me.IsNull(Me.tabledtCuentaCorriente.NU_RUCSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNU_RUCSNull()
            Me(Me.tabledtCuentaCorriente.NU_RUCSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTI_DOCUNull() As Boolean
            Return Me.IsNull(Me.tabledtCuentaCorriente.TI_DOCUColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTI_DOCUNull()
            Me(Me.tabledtCuentaCorriente.TI_DOCUColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNO_DOCUNull() As Boolean
            Return Me.IsNull(Me.tabledtCuentaCorriente.NO_DOCUColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNO_DOCUNull()
            Me(Me.tabledtCuentaCorriente.NO_DOCUColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNU_DOCUNull() As Boolean
            Return Me.IsNull(Me.tabledtCuentaCorriente.NU_DOCUColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNU_DOCUNull()
            Me(Me.tabledtCuentaCorriente.NU_DOCUColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFE_CNTA_CNTENull() As Boolean
            Return Me.IsNull(Me.tabledtCuentaCorriente.FE_CNTA_CNTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFE_CNTA_CNTENull()
            Me(Me.tabledtCuentaCorriente.FE_CNTA_CNTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCO_ZONANull() As Boolean
            Return Me.IsNull(Me.tabledtCuentaCorriente.CO_ZONAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCO_ZONANull()
            Me(Me.tabledtCuentaCorriente.CO_ZONAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCO_MONENull() As Boolean
            Return Me.IsNull(Me.tabledtCuentaCorriente.CO_MONEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCO_MONENull()
            Me(Me.tabledtCuentaCorriente.CO_MONEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSI_MONENull() As Boolean
            Return Me.IsNull(Me.tabledtCuentaCorriente.SI_MONEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSI_MONENull()
            Me(Me.tabledtCuentaCorriente.SI_MONEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIM_SOLENull() As Boolean
            Return Me.IsNull(Me.tabledtCuentaCorriente.IM_SOLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIM_SOLENull()
            Me(Me.tabledtCuentaCorriente.IM_SOLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIM_DOLANull() As Boolean
            Return Me.IsNull(Me.tabledtCuentaCorriente.IM_DOLAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIM_DOLANull()
            Me(Me.tabledtCuentaCorriente.IM_DOLAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCO_CLIENull() As Boolean
            Return Me.IsNull(Me.tabledtCuentaCorriente.CO_CLIEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCO_CLIENull()
            Me(Me.tabledtCuentaCorriente.CO_CLIEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNO_CLIENull() As Boolean
            Return Me.IsNull(Me.tabledtCuentaCorriente.NO_CLIEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNO_CLIENull()
            Me(Me.tabledtCuentaCorriente.NO_CLIEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsST_DOCUNull() As Boolean
            Return Me.IsNull(Me.tabledtCuentaCorriente.ST_DOCUColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetST_DOCUNull()
            Me(Me.tabledtCuentaCorriente.ST_DOCUColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsST_REGINull() As Boolean
            Return Me.IsNull(Me.tabledtCuentaCorriente.ST_REGIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetST_REGINull()
            Me(Me.tabledtCuentaCorriente.ST_REGIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCO_SAPPNull() As Boolean
            Return Me.IsNull(Me.tabledtCuentaCorriente.CO_SAPPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCO_SAPPNull()
            Me(Me.tabledtCuentaCorriente.CO_SAPPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCO_RUBR_CNTANull() As Boolean
            Return Me.IsNull(Me.tabledtCuentaCorriente.CO_RUBR_CNTAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCO_RUBR_CNTANull()
            Me(Me.tabledtCuentaCorriente.CO_RUBR_CNTAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTCMTRFNull() As Boolean
            Return Me.IsNull(Me.tabledtCuentaCorriente.TCMTRFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTCMTRFNull()
            Me(Me.tabledtCuentaCorriente.TCMTRFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIM_SOLE1Null() As Boolean
            Return Me.IsNull(Me.tabledtCuentaCorriente.IM_SOLE1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIM_SOLE1Null()
            Me(Me.tabledtCuentaCorriente.IM_SOLE1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIM_DOLA1Null() As Boolean
            Return Me.IsNull(Me.tabledtCuentaCorriente.IM_DOLA1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIM_DOLA1Null()
            Me(Me.tabledtCuentaCorriente.IM_DOLA1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCO_TIPO_ALMANull() As Boolean
            Return Me.IsNull(Me.tabledtCuentaCorriente.CO_TIPO_ALMAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCO_TIPO_ALMANull()
            Me(Me.tabledtCuentaCorriente.CO_TIPO_ALMAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCO_ALMA_DOCUNull() As Boolean
            Return Me.IsNull(Me.tabledtCuentaCorriente.CO_ALMA_DOCUColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCO_ALMA_DOCUNull()
            Me(Me.tabledtCuentaCorriente.CO_ALMA_DOCUColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtCuentaCorrienteRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtCuentaCorrienteRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtCuentaCorrienteRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtCuentaCorrienteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
